{"version":3,"sources":["skylark-pako.js"],"names":[],"mappingsfile":"../skylark-pako.js","sourcesContent":["define('skylark-pako/zlib/trees',[], function () {\n    'use strict';\n\n    const Z_FIXED = 4;\n    const Z_BINARY = 0;\n    const Z_TEXT = 1;\n    const Z_UNKNOWN = 2;\n    function zero(buf) {\n        let len = buf.length;\n        while (--len >= 0) {\n            buf[len] = 0;\n        }\n    }\n    const STORED_BLOCK = 0;\n    const STATIC_TREES = 1;\n    const DYN_TREES = 2;\n    const MIN_MATCH = 3;\n    const MAX_MATCH = 258;\n    const LENGTH_CODES = 29;\n    const LITERALS = 256;\n    const L_CODES = LITERALS + 1 + LENGTH_CODES;\n    const D_CODES = 30;\n    const BL_CODES = 19;\n    const HEAP_SIZE = 2 * L_CODES + 1;\n    const MAX_BITS = 15;\n    const Buf_size = 16;\n    const MAX_BL_BITS = 7;\n    const END_BLOCK = 256;\n    const REP_3_6 = 16;\n    const REPZ_3_10 = 17;\n    const REPZ_11_138 = 18;\n    const extra_lbits = new Uint8Array([\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        2,\n        2,\n        2,\n        2,\n        3,\n        3,\n        3,\n        3,\n        4,\n        4,\n        4,\n        4,\n        5,\n        5,\n        5,\n        5,\n        0\n    ]);\n    const extra_dbits = new Uint8Array([\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        2,\n        2,\n        3,\n        3,\n        4,\n        4,\n        5,\n        5,\n        6,\n        6,\n        7,\n        7,\n        8,\n        8,\n        9,\n        9,\n        10,\n        10,\n        11,\n        11,\n        12,\n        12,\n        13,\n        13\n    ]);\n    const extra_blbits = new Uint8Array([\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        2,\n        3,\n        7\n    ]);\n    const bl_order = new Uint8Array([\n        16,\n        17,\n        18,\n        0,\n        8,\n        7,\n        9,\n        6,\n        10,\n        5,\n        11,\n        4,\n        12,\n        3,\n        13,\n        2,\n        14,\n        1,\n        15\n    ]);\n    const DIST_CODE_LEN = 512;\n    const static_ltree = new Array((L_CODES + 2) * 2);\n    zero(static_ltree);\n    const static_dtree = new Array(D_CODES * 2);\n    zero(static_dtree);\n    const _dist_code = new Array(DIST_CODE_LEN);\n    zero(_dist_code);\n    const _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);\n    zero(_length_code);\n    const base_length = new Array(LENGTH_CODES);\n    zero(base_length);\n    const base_dist = new Array(D_CODES);\n    zero(base_dist);\n    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n        this.static_tree = static_tree;\n        this.extra_bits = extra_bits;\n        this.extra_base = extra_base;\n        this.elems = elems;\n        this.max_length = max_length;\n        this.has_stree = static_tree && static_tree.length;\n    }\n    let static_l_desc;\n    let static_d_desc;\n    let static_bl_desc;\n    function TreeDesc(dyn_tree, stat_desc) {\n        this.dyn_tree = dyn_tree;\n        this.max_code = 0;\n        this.stat_desc = stat_desc;\n    }\n    const d_code = dist => {\n        return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n    };\n    const put_short = (s, w) => {\n        s.pending_buf[s.pending++] = w & 255;\n        s.pending_buf[s.pending++] = w >>> 8 & 255;\n    };\n    const send_bits = (s, value, length) => {\n        if (s.bi_valid > Buf_size - length) {\n            s.bi_buf |= value << s.bi_valid & 65535;\n            put_short(s, s.bi_buf);\n            s.bi_buf = value >> Buf_size - s.bi_valid;\n            s.bi_valid += length - Buf_size;\n        } else {\n            s.bi_buf |= value << s.bi_valid & 65535;\n            s.bi_valid += length;\n        }\n    };\n    const send_code = (s, c, tree) => {\n        send_bits(s, tree[c * 2], tree[c * 2 + 1]);\n    };\n    const bi_reverse = (code, len) => {\n        let res = 0;\n        do {\n            res |= code & 1;\n            code >>>= 1;\n            res <<= 1;\n        } while (--len > 0);\n        return res >>> 1;\n    };\n    const bi_flush = s => {\n        if (s.bi_valid === 16) {\n            put_short(s, s.bi_buf);\n            s.bi_buf = 0;\n            s.bi_valid = 0;\n        } else if (s.bi_valid >= 8) {\n            s.pending_buf[s.pending++] = s.bi_buf & 255;\n            s.bi_buf >>= 8;\n            s.bi_valid -= 8;\n        }\n    };\n    const gen_bitlen = (s, desc) => {\n        const tree = desc.dyn_tree;\n        const max_code = desc.max_code;\n        const stree = desc.stat_desc.static_tree;\n        const has_stree = desc.stat_desc.has_stree;\n        const extra = desc.stat_desc.extra_bits;\n        const base = desc.stat_desc.extra_base;\n        const max_length = desc.stat_desc.max_length;\n        let h;\n        let n, m;\n        let bits;\n        let xbits;\n        let f;\n        let overflow = 0;\n        for (bits = 0; bits <= MAX_BITS; bits++) {\n            s.bl_count[bits] = 0;\n        }\n        tree[s.heap[s.heap_max] * 2 + 1] = 0;\n        for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n            n = s.heap[h];\n            bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n            if (bits > max_length) {\n                bits = max_length;\n                overflow++;\n            }\n            tree[n * 2 + 1] = bits;\n            if (n > max_code) {\n                continue;\n            }\n            s.bl_count[bits]++;\n            xbits = 0;\n            if (n >= base) {\n                xbits = extra[n - base];\n            }\n            f = tree[n * 2];\n            s.opt_len += f * (bits + xbits);\n            if (has_stree) {\n                s.static_len += f * (stree[n * 2 + 1] + xbits);\n            }\n        }\n        if (overflow === 0) {\n            return;\n        }\n        do {\n            bits = max_length - 1;\n            while (s.bl_count[bits] === 0) {\n                bits--;\n            }\n            s.bl_count[bits]--;\n            s.bl_count[bits + 1] += 2;\n            s.bl_count[max_length]--;\n            overflow -= 2;\n        } while (overflow > 0);\n        for (bits = max_length; bits !== 0; bits--) {\n            n = s.bl_count[bits];\n            while (n !== 0) {\n                m = s.heap[--h];\n                if (m > max_code) {\n                    continue;\n                }\n                if (tree[m * 2 + 1] !== bits) {\n                    s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n                    tree[m * 2 + 1] = bits;\n                }\n                n--;\n            }\n        }\n    };\n    const gen_codes = (tree, max_code, bl_count) => {\n        const next_code = new Array(MAX_BITS + 1);\n        let code = 0;\n        let bits;\n        let n;\n        for (bits = 1; bits <= MAX_BITS; bits++) {\n            next_code[bits] = code = code + bl_count[bits - 1] << 1;\n        }\n        for (n = 0; n <= max_code; n++) {\n            let len = tree[n * 2 + 1];\n            if (len === 0) {\n                continue;\n            }\n            tree[n * 2] = bi_reverse(next_code[len]++, len);\n        }\n    };\n    const tr_static_init = () => {\n        let n;\n        let bits;\n        let length;\n        let code;\n        let dist;\n        const bl_count = new Array(MAX_BITS + 1);\n        length = 0;\n        for (code = 0; code < LENGTH_CODES - 1; code++) {\n            base_length[code] = length;\n            for (n = 0; n < 1 << extra_lbits[code]; n++) {\n                _length_code[length++] = code;\n            }\n        }\n        _length_code[length - 1] = code;\n        dist = 0;\n        for (code = 0; code < 16; code++) {\n            base_dist[code] = dist;\n            for (n = 0; n < 1 << extra_dbits[code]; n++) {\n                _dist_code[dist++] = code;\n            }\n        }\n        dist >>= 7;\n        for (; code < D_CODES; code++) {\n            base_dist[code] = dist << 7;\n            for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {\n                _dist_code[256 + dist++] = code;\n            }\n        }\n        for (bits = 0; bits <= MAX_BITS; bits++) {\n            bl_count[bits] = 0;\n        }\n        n = 0;\n        while (n <= 143) {\n            static_ltree[n * 2 + 1] = 8;\n            n++;\n            bl_count[8]++;\n        }\n        while (n <= 255) {\n            static_ltree[n * 2 + 1] = 9;\n            n++;\n            bl_count[9]++;\n        }\n        while (n <= 279) {\n            static_ltree[n * 2 + 1] = 7;\n            n++;\n            bl_count[7]++;\n        }\n        while (n <= 287) {\n            static_ltree[n * 2 + 1] = 8;\n            n++;\n            bl_count[8]++;\n        }\n        gen_codes(static_ltree, L_CODES + 1, bl_count);\n        for (n = 0; n < D_CODES; n++) {\n            static_dtree[n * 2 + 1] = 5;\n            static_dtree[n * 2] = bi_reverse(n, 5);\n        }\n        static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n        static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);\n        static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n    };\n    const init_block = s => {\n        let n;\n        for (n = 0; n < L_CODES; n++) {\n            s.dyn_ltree[n * 2] = 0;\n        }\n        for (n = 0; n < D_CODES; n++) {\n            s.dyn_dtree[n * 2] = 0;\n        }\n        for (n = 0; n < BL_CODES; n++) {\n            s.bl_tree[n * 2] = 0;\n        }\n        s.dyn_ltree[END_BLOCK * 2] = 1;\n        s.opt_len = s.static_len = 0;\n        s.last_lit = s.matches = 0;\n    };\n    const bi_windup = s => {\n        if (s.bi_valid > 8) {\n            put_short(s, s.bi_buf);\n        } else if (s.bi_valid > 0) {\n            s.pending_buf[s.pending++] = s.bi_buf;\n        }\n        s.bi_buf = 0;\n        s.bi_valid = 0;\n    };\n    const copy_block = (s, buf, len, header) => {\n        bi_windup(s);\n        if (header) {\n            put_short(s, len);\n            put_short(s, ~len);\n        }\n        s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);\n        s.pending += len;\n    };\n    const smaller = (tree, n, m, depth) => {\n        const _n2 = n * 2;\n        const _m2 = m * 2;\n        return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];\n    };\n    const pqdownheap = (s, tree, k) => {\n        const v = s.heap[k];\n        let j = k << 1;\n        while (j <= s.heap_len) {\n            if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n                j++;\n            }\n            if (smaller(tree, v, s.heap[j], s.depth)) {\n                break;\n            }\n            s.heap[k] = s.heap[j];\n            k = j;\n            j <<= 1;\n        }\n        s.heap[k] = v;\n    };\n    const compress_block = (s, ltree, dtree) => {\n        let dist;\n        let lc;\n        let lx = 0;\n        let code;\n        let extra;\n        if (s.last_lit !== 0) {\n            do {\n                dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];\n                lc = s.pending_buf[s.l_buf + lx];\n                lx++;\n                if (dist === 0) {\n                    send_code(s, lc, ltree);\n                } else {\n                    code = _length_code[lc];\n                    send_code(s, code + LITERALS + 1, ltree);\n                    extra = extra_lbits[code];\n                    if (extra !== 0) {\n                        lc -= base_length[code];\n                        send_bits(s, lc, extra);\n                    }\n                    dist--;\n                    code = d_code(dist);\n                    send_code(s, code, dtree);\n                    extra = extra_dbits[code];\n                    if (extra !== 0) {\n                        dist -= base_dist[code];\n                        send_bits(s, dist, extra);\n                    }\n                }\n            } while (lx < s.last_lit);\n        }\n        send_code(s, END_BLOCK, ltree);\n    };\n    const build_tree = (s, desc) => {\n        const tree = desc.dyn_tree;\n        const stree = desc.stat_desc.static_tree;\n        const has_stree = desc.stat_desc.has_stree;\n        const elems = desc.stat_desc.elems;\n        let n, m;\n        let max_code = -1;\n        let node;\n        s.heap_len = 0;\n        s.heap_max = HEAP_SIZE;\n        for (n = 0; n < elems; n++) {\n            if (tree[n * 2] !== 0) {\n                s.heap[++s.heap_len] = max_code = n;\n                s.depth[n] = 0;\n            } else {\n                tree[n * 2 + 1] = 0;\n            }\n        }\n        while (s.heap_len < 2) {\n            node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n            tree[node * 2] = 1;\n            s.depth[node] = 0;\n            s.opt_len--;\n            if (has_stree) {\n                s.static_len -= stree[node * 2 + 1];\n            }\n        }\n        desc.max_code = max_code;\n        for (n = s.heap_len >> 1; n >= 1; n--) {\n            pqdownheap(s, tree, n);\n        }\n        node = elems;\n        do {\n            n = s.heap[1];\n            s.heap[1] = s.heap[s.heap_len--];\n            pqdownheap(s, tree, 1);\n            m = s.heap[1];\n            s.heap[--s.heap_max] = n;\n            s.heap[--s.heap_max] = m;\n            tree[node * 2] = tree[n * 2] + tree[m * 2];\n            s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n            tree[n * 2 + 1] = tree[m * 2 + 1] = node;\n            s.heap[1] = node++;\n            pqdownheap(s, tree, 1);\n        } while (s.heap_len >= 2);\n        s.heap[--s.heap_max] = s.heap[1];\n        gen_bitlen(s, desc);\n        gen_codes(tree, max_code, s.bl_count);\n    };\n    const scan_tree = (s, tree, max_code) => {\n        let n;\n        let prevlen = -1;\n        let curlen;\n        let nextlen = tree[0 * 2 + 1];\n        let count = 0;\n        let max_count = 7;\n        let min_count = 4;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        }\n        tree[(max_code + 1) * 2 + 1] = 65535;\n        for (n = 0; n <= max_code; n++) {\n            curlen = nextlen;\n            nextlen = tree[(n + 1) * 2 + 1];\n            if (++count < max_count && curlen === nextlen) {\n                continue;\n            } else if (count < min_count) {\n                s.bl_tree[curlen * 2] += count;\n            } else if (curlen !== 0) {\n                if (curlen !== prevlen) {\n                    s.bl_tree[curlen * 2]++;\n                }\n                s.bl_tree[REP_3_6 * 2]++;\n            } else if (count <= 10) {\n                s.bl_tree[REPZ_3_10 * 2]++;\n            } else {\n                s.bl_tree[REPZ_11_138 * 2]++;\n            }\n            count = 0;\n            prevlen = curlen;\n            if (nextlen === 0) {\n                max_count = 138;\n                min_count = 3;\n            } else if (curlen === nextlen) {\n                max_count = 6;\n                min_count = 3;\n            } else {\n                max_count = 7;\n                min_count = 4;\n            }\n        }\n    };\n    const send_tree = (s, tree, max_code) => {\n        let n;\n        let prevlen = -1;\n        let curlen;\n        let nextlen = tree[0 * 2 + 1];\n        let count = 0;\n        let max_count = 7;\n        let min_count = 4;\n        if (nextlen === 0) {\n            max_count = 138;\n            min_count = 3;\n        }\n        for (n = 0; n <= max_code; n++) {\n            curlen = nextlen;\n            nextlen = tree[(n + 1) * 2 + 1];\n            if (++count < max_count && curlen === nextlen) {\n                continue;\n            } else if (count < min_count) {\n                do {\n                    send_code(s, curlen, s.bl_tree);\n                } while (--count !== 0);\n            } else if (curlen !== 0) {\n                if (curlen !== prevlen) {\n                    send_code(s, curlen, s.bl_tree);\n                    count--;\n                }\n                send_code(s, REP_3_6, s.bl_tree);\n                send_bits(s, count - 3, 2);\n            } else if (count <= 10) {\n                send_code(s, REPZ_3_10, s.bl_tree);\n                send_bits(s, count - 3, 3);\n            } else {\n                send_code(s, REPZ_11_138, s.bl_tree);\n                send_bits(s, count - 11, 7);\n            }\n            count = 0;\n            prevlen = curlen;\n            if (nextlen === 0) {\n                max_count = 138;\n                min_count = 3;\n            } else if (curlen === nextlen) {\n                max_count = 6;\n                min_count = 3;\n            } else {\n                max_count = 7;\n                min_count = 4;\n            }\n        }\n    };\n    const build_bl_tree = s => {\n        let max_blindex;\n        scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n        scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n        build_tree(s, s.bl_desc);\n        for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n            if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {\n                break;\n            }\n        }\n        s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n        return max_blindex;\n    };\n    const send_all_trees = (s, lcodes, dcodes, blcodes) => {\n        let rank;\n        send_bits(s, lcodes - 257, 5);\n        send_bits(s, dcodes - 1, 5);\n        send_bits(s, blcodes - 4, 4);\n        for (rank = 0; rank < blcodes; rank++) {\n            send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);\n        }\n        send_tree(s, s.dyn_ltree, lcodes - 1);\n        send_tree(s, s.dyn_dtree, dcodes - 1);\n    };\n    const detect_data_type = s => {\n        let black_mask = 4093624447;\n        let n;\n        for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n            if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) {\n                return Z_BINARY;\n            }\n        }\n        if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {\n            return Z_TEXT;\n        }\n        for (n = 32; n < LITERALS; n++) {\n            if (s.dyn_ltree[n * 2] !== 0) {\n                return Z_TEXT;\n            }\n        }\n        return Z_BINARY;\n    };\n    let static_init_done = false;\n    const _tr_init = s => {\n        if (!static_init_done) {\n            tr_static_init();\n            static_init_done = true;\n        }\n        s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);\n        s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);\n        s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n        s.bi_buf = 0;\n        s.bi_valid = 0;\n        init_block(s);\n    };\n    const _tr_stored_block = (s, buf, stored_len, last) => {\n        send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);\n        copy_block(s, buf, stored_len, true);\n    };\n    const _tr_align = s => {\n        send_bits(s, STATIC_TREES << 1, 3);\n        send_code(s, END_BLOCK, static_ltree);\n        bi_flush(s);\n    };\n    const _tr_flush_block = (s, buf, stored_len, last) => {\n        let opt_lenb, static_lenb;\n        let max_blindex = 0;\n        if (s.level > 0) {\n            if (s.strm.data_type === Z_UNKNOWN) {\n                s.strm.data_type = detect_data_type(s);\n            }\n            build_tree(s, s.l_desc);\n            build_tree(s, s.d_desc);\n            max_blindex = build_bl_tree(s);\n            opt_lenb = s.opt_len + 3 + 7 >>> 3;\n            static_lenb = s.static_len + 3 + 7 >>> 3;\n            if (static_lenb <= opt_lenb) {\n                opt_lenb = static_lenb;\n            }\n        } else {\n            opt_lenb = static_lenb = stored_len + 5;\n        }\n        if (stored_len + 4 <= opt_lenb && buf !== -1) {\n            _tr_stored_block(s, buf, stored_len, last);\n        } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n            send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n            compress_block(s, static_ltree, static_dtree);\n        } else {\n            send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n            send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n            compress_block(s, s.dyn_ltree, s.dyn_dtree);\n        }\n        init_block(s);\n        if (last) {\n            bi_windup(s);\n        }\n    };\n    const _tr_tally = (s, dist, lc) => {\n        s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;\n        s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;\n        s.pending_buf[s.l_buf + s.last_lit] = lc & 255;\n        s.last_lit++;\n        if (dist === 0) {\n            s.dyn_ltree[lc * 2]++;\n        } else {\n            s.matches++;\n            dist--;\n            s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++;\n            s.dyn_dtree[d_code(dist) * 2]++;\n        }\n        return s.last_lit === s.lit_bufsize - 1;\n    };\n\n\n    return {\n        _tr_init,\n        _tr_stored_block,\n        _tr_flush_block,\n        _tr_tally,\n        _tr_align\n    };\n\n\n});\ndefine('skylark-pako/zlib/adler32',[], function () {\n    'use strict';\n\n    function adler32 (adler, buf, len, pos)  {\n        let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;\n        while (len !== 0) {\n            n = len > 2000 ? 2000 : len;\n            len -= n;\n            do {\n                s1 = s1 + buf[pos++] | 0;\n                s2 = s2 + s1 | 0;\n            } while (--n);\n            s1 %= 65521;\n            s2 %= 65521;\n        }\n        return s1 | s2 << 16 | 0;\n    };\n\n    return  adler32;\n\n});\ndefine('skylark-pako/zlib/crc32',[], function () {\n    'use strict';\n\n    const makeTable = () => {\n        let c, table = [];\n        for (var n = 0; n < 256; n++) {\n            c = n;\n            for (var k = 0; k < 8; k++) {\n                c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;\n            }\n            table[n] = c;\n        }\n        return table;\n    };\n    \n    const crcTable = new Uint32Array(makeTable());\n    const crc32 = (crc, buf, len, pos) => {\n        const t = crcTable;\n        const end = pos + len;\n        crc ^= -1;\n        for (let i = pos; i < end; i++) {\n            crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];\n        }\n        return crc ^ -1;\n    };\n\n\n    return crc32;\n\n});\ndefine('skylark-pako/zlib/messages',[], function () {\n    'use strict';\n\n    return  {\n        2: 'need dictionary',\n        1: 'stream end',\n        0: '',\n        '-1': 'file error',\n        '-2': 'stream error',\n        '-3': 'data error',\n        '-4': 'insufficient memory',\n        '-5': 'buffer error',\n        '-6': 'incompatible version'\n    };\n\n});\ndefine('skylark-pako/zlib/constants',[], function () {\n    'use strict';\n\n    return {\n        Z_NO_FLUSH: 0,\n        Z_PARTIAL_FLUSH: 1,\n        Z_SYNC_FLUSH: 2,\n        Z_FULL_FLUSH: 3,\n        Z_FINISH: 4,\n        Z_BLOCK: 5,\n        Z_TREES: 6,\n        Z_OK: 0,\n        Z_STREAM_END: 1,\n        Z_NEED_DICT: 2,\n        Z_ERRNO: -1,\n        Z_STREAM_ERROR: -2,\n        Z_DATA_ERROR: -3,\n        Z_MEM_ERROR: -4,\n        Z_BUF_ERROR: -5,\n        Z_NO_COMPRESSION: 0,\n        Z_BEST_SPEED: 1,\n        Z_BEST_COMPRESSION: 9,\n        Z_DEFAULT_COMPRESSION: -1,\n        Z_FILTERED: 1,\n        Z_HUFFMAN_ONLY: 2,\n        Z_RLE: 3,\n        Z_FIXED: 4,\n        Z_DEFAULT_STRATEGY: 0,\n        Z_BINARY: 0,\n        Z_TEXT: 1,\n        Z_UNKNOWN: 2,\n        Z_DEFLATED: 8\n    };\n\n});\ndefine('skylark-pako/zlib/deflate',[\n    './trees',\n    './adler32',\n    './crc32',\n    './messages',\n    './constants'\n], function (trees, adler32, crc32, msg, constants) {\n    'use strict';\n\n\n    const {_tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align} = trees;\n    const {Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK, Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR, Z_DEFAULT_COMPRESSION, Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY, Z_UNKNOWN, Z_DEFLATED} = __module__4;\n\n    const MAX_MEM_LEVEL = 9;\n    const MAX_WBITS = 15;\n    const DEF_MEM_LEVEL = 8;\n    const LENGTH_CODES = 29;\n    const LITERALS = 256;\n    const L_CODES = LITERALS + 1 + LENGTH_CODES;\n    const D_CODES = 30;\n    const BL_CODES = 19;\n    const HEAP_SIZE = 2 * L_CODES + 1;\n    const MAX_BITS = 15;\n    const MIN_MATCH = 3;\n    const MAX_MATCH = 258;\n    const MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;\n    const PRESET_DICT = 32;\n    const INIT_STATE = 42;\n    const EXTRA_STATE = 69;\n    const NAME_STATE = 73;\n    const COMMENT_STATE = 91;\n    const HCRC_STATE = 103;\n    const BUSY_STATE = 113;\n    const FINISH_STATE = 666;\n    const BS_NEED_MORE = 1;\n    const BS_BLOCK_DONE = 2;\n    const BS_FINISH_STARTED = 3;\n    const BS_FINISH_DONE = 4;\n    const OS_CODE = 3;\n    const err = (strm, errorCode) => {\n        strm.msg = msg[errorCode];\n        return errorCode;\n    };\n    const rank = f => {\n        return (f << 1) - (f > 4 ? 9 : 0);\n    };\n    const zero = buf => {\n        let len = buf.length;\n        while (--len >= 0) {\n            buf[len] = 0;\n        }\n    };\n    let HASH_ZLIB = (s, prev, data) => (prev << s.hash_shift ^ data) & s.hash_mask;\n    let HASH = HASH_ZLIB;\n    const flush_pending = strm => {\n        const s = strm.state;\n        let len = s.pending;\n        if (len > strm.avail_out) {\n            len = strm.avail_out;\n        }\n        if (len === 0) {\n            return;\n        }\n        strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n        strm.next_out += len;\n        s.pending_out += len;\n        strm.total_out += len;\n        strm.avail_out -= len;\n        s.pending -= len;\n        if (s.pending === 0) {\n            s.pending_out = 0;\n        }\n    };\n    const flush_block_only = (s, last) => {\n        _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);\n        s.block_start = s.strstart;\n        flush_pending(s.strm);\n    };\n    const put_byte = (s, b) => {\n        s.pending_buf[s.pending++] = b;\n    };\n    const putShortMSB = (s, b) => {\n        s.pending_buf[s.pending++] = b >>> 8 & 255;\n        s.pending_buf[s.pending++] = b & 255;\n    };\n    const read_buf = (strm, buf, start, size) => {\n        let len = strm.avail_in;\n        if (len > size) {\n            len = size;\n        }\n        if (len === 0) {\n            return 0;\n        }\n        strm.avail_in -= len;\n        buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n        if (strm.state.wrap === 1) {\n            strm.adler = adler32(strm.adler, buf, len, start);\n        } else if (strm.state.wrap === 2) {\n            strm.adler = crc32(strm.adler, buf, len, start);\n        }\n        strm.next_in += len;\n        strm.total_in += len;\n        return len;\n    };\n    const longest_match = (s, cur_match) => {\n        let chain_length = s.max_chain_length;\n        let scan = s.strstart;\n        let match;\n        let len;\n        let best_len = s.prev_length;\n        let nice_match = s.nice_match;\n        const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;\n        const _win = s.window;\n        const wmask = s.w_mask;\n        const prev = s.prev;\n        const strend = s.strstart + MAX_MATCH;\n        let scan_end1 = _win[scan + best_len - 1];\n        let scan_end = _win[scan + best_len];\n        if (s.prev_length >= s.good_match) {\n            chain_length >>= 2;\n        }\n        if (nice_match > s.lookahead) {\n            nice_match = s.lookahead;\n        }\n        do {\n            match = cur_match;\n            if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {\n                continue;\n            }\n            scan += 2;\n            match++;\n            do {\n            } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);\n            len = MAX_MATCH - (strend - scan);\n            scan = strend - MAX_MATCH;\n            if (len > best_len) {\n                s.match_start = cur_match;\n                best_len = len;\n                if (len >= nice_match) {\n                    break;\n                }\n                scan_end1 = _win[scan + best_len - 1];\n                scan_end = _win[scan + best_len];\n            }\n        } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n        if (best_len <= s.lookahead) {\n            return best_len;\n        }\n        return s.lookahead;\n    };\n    const fill_window = s => {\n        const _w_size = s.w_size;\n        let p, n, m, more, str;\n        do {\n            more = s.window_size - s.lookahead - s.strstart;\n            if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n                s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);\n                s.match_start -= _w_size;\n                s.strstart -= _w_size;\n                s.block_start -= _w_size;\n                n = s.hash_size;\n                p = n;\n                do {\n                    m = s.head[--p];\n                    s.head[p] = m >= _w_size ? m - _w_size : 0;\n                } while (--n);\n                n = _w_size;\n                p = n;\n                do {\n                    m = s.prev[--p];\n                    s.prev[p] = m >= _w_size ? m - _w_size : 0;\n                } while (--n);\n                more += _w_size;\n            }\n            if (s.strm.avail_in === 0) {\n                break;\n            }\n            n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n            s.lookahead += n;\n            if (s.lookahead + s.insert >= MIN_MATCH) {\n                str = s.strstart - s.insert;\n                s.ins_h = s.window[str];\n                s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n                while (s.insert) {\n                    s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n                    s.prev[str & s.w_mask] = s.head[s.ins_h];\n                    s.head[s.ins_h] = str;\n                    str++;\n                    s.insert--;\n                    if (s.lookahead + s.insert < MIN_MATCH) {\n                        break;\n                    }\n                }\n            }\n        } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n    };\n    const deflate_stored = (s, flush) => {\n        let max_block_size = 65535;\n        if (max_block_size > s.pending_buf_size - 5) {\n            max_block_size = s.pending_buf_size - 5;\n        }\n        for (;;) {\n            if (s.lookahead <= 1) {\n                fill_window(s);\n                if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n                    return BS_NEED_MORE;\n                }\n                if (s.lookahead === 0) {\n                    break;\n                }\n            }\n            s.strstart += s.lookahead;\n            s.lookahead = 0;\n            const max_start = s.block_start + max_block_size;\n            if (s.strstart === 0 || s.strstart >= max_start) {\n                s.lookahead = s.strstart - max_start;\n                s.strstart = max_start;\n                flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            }\n            if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {\n                flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            }\n        }\n        s.insert = 0;\n        if (flush === Z_FINISH) {\n            flush_block_only(s, true);\n            if (s.strm.avail_out === 0) {\n                return BS_FINISH_STARTED;\n            }\n            return BS_FINISH_DONE;\n        }\n        if (s.strstart > s.block_start) {\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        }\n        return BS_NEED_MORE;\n    };\n    const deflate_fast = (s, flush) => {\n        let hash_head;\n        let bflush;\n        for (;;) {\n            if (s.lookahead < MIN_LOOKAHEAD) {\n                fill_window(s);\n                if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n                    return BS_NEED_MORE;\n                }\n                if (s.lookahead === 0) {\n                    break;\n                }\n            }\n            hash_head = 0;\n            if (s.lookahead >= MIN_MATCH) {\n                s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = s.strstart;\n            }\n            if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n                s.match_length = longest_match(s, hash_head);\n            }\n            if (s.match_length >= MIN_MATCH) {\n                bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n                s.lookahead -= s.match_length;\n                if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {\n                    s.match_length--;\n                    do {\n                        s.strstart++;\n                        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                        s.head[s.ins_h] = s.strstart;\n                    } while (--s.match_length !== 0);\n                    s.strstart++;\n                } else {\n                    s.strstart += s.match_length;\n                    s.match_length = 0;\n                    s.ins_h = s.window[s.strstart];\n                    s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n                }\n            } else {\n                bflush = _tr_tally(s, 0, s.window[s.strstart]);\n                s.lookahead--;\n                s.strstart++;\n            }\n            if (bflush) {\n                flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            }\n        }\n        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n        if (flush === Z_FINISH) {\n            flush_block_only(s, true);\n            if (s.strm.avail_out === 0) {\n                return BS_FINISH_STARTED;\n            }\n            return BS_FINISH_DONE;\n        }\n        if (s.last_lit) {\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        }\n        return BS_BLOCK_DONE;\n    };\n    const deflate_slow = (s, flush) => {\n        let hash_head;\n        let bflush;\n        let max_insert;\n        for (;;) {\n            if (s.lookahead < MIN_LOOKAHEAD) {\n                fill_window(s);\n                if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n                    return BS_NEED_MORE;\n                }\n                if (s.lookahead === 0) {\n                    break;\n                }\n            }\n            hash_head = 0;\n            if (s.lookahead >= MIN_MATCH) {\n                s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = s.strstart;\n            }\n            s.prev_length = s.match_length;\n            s.prev_match = s.match_start;\n            s.match_length = MIN_MATCH - 1;\n            if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {\n                s.match_length = longest_match(s, hash_head);\n                if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {\n                    s.match_length = MIN_MATCH - 1;\n                }\n            }\n            if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n                max_insert = s.strstart + s.lookahead - MIN_MATCH;\n                bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n                s.lookahead -= s.prev_length - 1;\n                s.prev_length -= 2;\n                do {\n                    if (++s.strstart <= max_insert) {\n                        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n                        s.head[s.ins_h] = s.strstart;\n                    }\n                } while (--s.prev_length !== 0);\n                s.match_available = 0;\n                s.match_length = MIN_MATCH - 1;\n                s.strstart++;\n                if (bflush) {\n                    flush_block_only(s, false);\n                    if (s.strm.avail_out === 0) {\n                        return BS_NEED_MORE;\n                    }\n                }\n            } else if (s.match_available) {\n                bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n                if (bflush) {\n                    flush_block_only(s, false);\n                }\n                s.strstart++;\n                s.lookahead--;\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            } else {\n                s.match_available = 1;\n                s.strstart++;\n                s.lookahead--;\n            }\n        }\n        if (s.match_available) {\n            bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n            s.match_available = 0;\n        }\n        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n        if (flush === Z_FINISH) {\n            flush_block_only(s, true);\n            if (s.strm.avail_out === 0) {\n                return BS_FINISH_STARTED;\n            }\n            return BS_FINISH_DONE;\n        }\n        if (s.last_lit) {\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        }\n        return BS_BLOCK_DONE;\n    };\n    const deflate_rle = (s, flush) => {\n        let bflush;\n        let prev;\n        let scan, strend;\n        const _win = s.window;\n        for (;;) {\n            if (s.lookahead <= MAX_MATCH) {\n                fill_window(s);\n                if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n                    return BS_NEED_MORE;\n                }\n                if (s.lookahead === 0) {\n                    break;\n                }\n            }\n            s.match_length = 0;\n            if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n                scan = s.strstart - 1;\n                prev = _win[scan];\n                if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n                    strend = s.strstart + MAX_MATCH;\n                    do {\n                    } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);\n                    s.match_length = MAX_MATCH - (strend - scan);\n                    if (s.match_length > s.lookahead) {\n                        s.match_length = s.lookahead;\n                    }\n                }\n            }\n            if (s.match_length >= MIN_MATCH) {\n                bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n                s.lookahead -= s.match_length;\n                s.strstart += s.match_length;\n                s.match_length = 0;\n            } else {\n                bflush = _tr_tally(s, 0, s.window[s.strstart]);\n                s.lookahead--;\n                s.strstart++;\n            }\n            if (bflush) {\n                flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            }\n        }\n        s.insert = 0;\n        if (flush === Z_FINISH) {\n            flush_block_only(s, true);\n            if (s.strm.avail_out === 0) {\n                return BS_FINISH_STARTED;\n            }\n            return BS_FINISH_DONE;\n        }\n        if (s.last_lit) {\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        }\n        return BS_BLOCK_DONE;\n    };\n    const deflate_huff = (s, flush) => {\n        let bflush;\n        for (;;) {\n            if (s.lookahead === 0) {\n                fill_window(s);\n                if (s.lookahead === 0) {\n                    if (flush === Z_NO_FLUSH) {\n                        return BS_NEED_MORE;\n                    }\n                    break;\n                }\n            }\n            s.match_length = 0;\n            bflush = _tr_tally(s, 0, s.window[s.strstart]);\n            s.lookahead--;\n            s.strstart++;\n            if (bflush) {\n                flush_block_only(s, false);\n                if (s.strm.avail_out === 0) {\n                    return BS_NEED_MORE;\n                }\n            }\n        }\n        s.insert = 0;\n        if (flush === Z_FINISH) {\n            flush_block_only(s, true);\n            if (s.strm.avail_out === 0) {\n                return BS_FINISH_STARTED;\n            }\n            return BS_FINISH_DONE;\n        }\n        if (s.last_lit) {\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n                return BS_NEED_MORE;\n            }\n        }\n        return BS_BLOCK_DONE;\n    };\n    function Config(good_length, max_lazy, nice_length, max_chain, func) {\n        this.good_length = good_length;\n        this.max_lazy = max_lazy;\n        this.nice_length = nice_length;\n        this.max_chain = max_chain;\n        this.func = func;\n    }\n    const configuration_table = [\n        new Config(0, 0, 0, 0, deflate_stored),\n        new Config(4, 4, 8, 4, deflate_fast),\n        new Config(4, 5, 16, 8, deflate_fast),\n        new Config(4, 6, 32, 32, deflate_fast),\n        new Config(4, 4, 16, 16, deflate_slow),\n        new Config(8, 16, 32, 32, deflate_slow),\n        new Config(8, 16, 128, 128, deflate_slow),\n        new Config(8, 32, 128, 256, deflate_slow),\n        new Config(32, 128, 258, 1024, deflate_slow),\n        new Config(32, 258, 258, 4096, deflate_slow)\n    ];\n    const lm_init = s => {\n        s.window_size = 2 * s.w_size;\n        zero(s.head);\n        s.max_lazy_match = configuration_table[s.level].max_lazy;\n        s.good_match = configuration_table[s.level].good_length;\n        s.nice_match = configuration_table[s.level].nice_length;\n        s.max_chain_length = configuration_table[s.level].max_chain;\n        s.strstart = 0;\n        s.block_start = 0;\n        s.lookahead = 0;\n        s.insert = 0;\n        s.match_length = s.prev_length = MIN_MATCH - 1;\n        s.match_available = 0;\n        s.ins_h = 0;\n    };\n    function DeflateState() {\n        this.strm = null;\n        this.status = 0;\n        this.pending_buf = null;\n        this.pending_buf_size = 0;\n        this.pending_out = 0;\n        this.pending = 0;\n        this.wrap = 0;\n        this.gzhead = null;\n        this.gzindex = 0;\n        this.method = Z_DEFLATED;\n        this.last_flush = -1;\n        this.w_size = 0;\n        this.w_bits = 0;\n        this.w_mask = 0;\n        this.window = null;\n        this.window_size = 0;\n        this.prev = null;\n        this.head = null;\n        this.ins_h = 0;\n        this.hash_size = 0;\n        this.hash_bits = 0;\n        this.hash_mask = 0;\n        this.hash_shift = 0;\n        this.block_start = 0;\n        this.match_length = 0;\n        this.prev_match = 0;\n        this.match_available = 0;\n        this.strstart = 0;\n        this.match_start = 0;\n        this.lookahead = 0;\n        this.prev_length = 0;\n        this.max_chain_length = 0;\n        this.max_lazy_match = 0;\n        this.level = 0;\n        this.strategy = 0;\n        this.good_match = 0;\n        this.nice_match = 0;\n        this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);\n        this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);\n        this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);\n        zero(this.dyn_ltree);\n        zero(this.dyn_dtree);\n        zero(this.bl_tree);\n        this.l_desc = null;\n        this.d_desc = null;\n        this.bl_desc = null;\n        this.bl_count = new Uint16Array(MAX_BITS + 1);\n        this.heap = new Uint16Array(2 * L_CODES + 1);\n        zero(this.heap);\n        this.heap_len = 0;\n        this.heap_max = 0;\n        this.depth = new Uint16Array(2 * L_CODES + 1);\n        zero(this.depth);\n        this.l_buf = 0;\n        this.lit_bufsize = 0;\n        this.last_lit = 0;\n        this.d_buf = 0;\n        this.opt_len = 0;\n        this.static_len = 0;\n        this.matches = 0;\n        this.insert = 0;\n        this.bi_buf = 0;\n        this.bi_valid = 0;\n    }\n    const deflateResetKeep = strm => {\n        if (!strm || !strm.state) {\n            return err(strm, Z_STREAM_ERROR);\n        }\n        strm.total_in = strm.total_out = 0;\n        strm.data_type = Z_UNKNOWN;\n        const s = strm.state;\n        s.pending = 0;\n        s.pending_out = 0;\n        if (s.wrap < 0) {\n            s.wrap = -s.wrap;\n        }\n        s.status = s.wrap ? INIT_STATE : BUSY_STATE;\n        strm.adler = s.wrap === 2 ? 0 : 1;\n        s.last_flush = Z_NO_FLUSH;\n        _tr_init(s);\n        return Z_OK;\n    };\n    const deflateReset = strm => {\n        const ret = deflateResetKeep(strm);\n        if (ret === Z_OK) {\n            lm_init(strm.state);\n        }\n        return ret;\n    };\n    const deflateSetHeader = (strm, head) => {\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        if (strm.state.wrap !== 2) {\n            return Z_STREAM_ERROR;\n        }\n        strm.state.gzhead = head;\n        return Z_OK;\n    };\n    const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n        if (!strm) {\n            return Z_STREAM_ERROR;\n        }\n        let wrap = 1;\n        if (level === Z_DEFAULT_COMPRESSION) {\n            level = 6;\n        }\n        if (windowBits < 0) {\n            wrap = 0;\n            windowBits = -windowBits;\n        } else if (windowBits > 15) {\n            wrap = 2;\n            windowBits -= 16;\n        }\n        if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {\n            return err(strm, Z_STREAM_ERROR);\n        }\n        if (windowBits === 8) {\n            windowBits = 9;\n        }\n        const s = new DeflateState();\n        strm.state = s;\n        s.strm = strm;\n        s.wrap = wrap;\n        s.gzhead = null;\n        s.w_bits = windowBits;\n        s.w_size = 1 << s.w_bits;\n        s.w_mask = s.w_size - 1;\n        s.hash_bits = memLevel + 7;\n        s.hash_size = 1 << s.hash_bits;\n        s.hash_mask = s.hash_size - 1;\n        s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n        s.window = new Uint8Array(s.w_size * 2);\n        s.head = new Uint16Array(s.hash_size);\n        s.prev = new Uint16Array(s.w_size);\n        s.lit_bufsize = 1 << memLevel + 6;\n        s.pending_buf_size = s.lit_bufsize * 4;\n        s.pending_buf = new Uint8Array(s.pending_buf_size);\n        s.d_buf = 1 * s.lit_bufsize;\n        s.l_buf = (1 + 2) * s.lit_bufsize;\n        s.level = level;\n        s.strategy = strategy;\n        s.method = method;\n        return deflateReset(strm);\n    };\n    const deflateInit = (strm, level) => {\n        return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n    };\n    const deflate = (strm, flush) => {\n        let beg, val;\n        if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {\n            return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n        }\n        const s = strm.state;\n        if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {\n            return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);\n        }\n        s.strm = strm;\n        const old_flush = s.last_flush;\n        s.last_flush = flush;\n        if (s.status === INIT_STATE) {\n            if (s.wrap === 2) {\n                strm.adler = 0;\n                put_byte(s, 31);\n                put_byte(s, 139);\n                put_byte(s, 8);\n                if (!s.gzhead) {\n                    put_byte(s, 0);\n                    put_byte(s, 0);\n                    put_byte(s, 0);\n                    put_byte(s, 0);\n                    put_byte(s, 0);\n                    put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n                    put_byte(s, OS_CODE);\n                    s.status = BUSY_STATE;\n                } else {\n                    put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));\n                    put_byte(s, s.gzhead.time & 255);\n                    put_byte(s, s.gzhead.time >> 8 & 255);\n                    put_byte(s, s.gzhead.time >> 16 & 255);\n                    put_byte(s, s.gzhead.time >> 24 & 255);\n                    put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);\n                    put_byte(s, s.gzhead.os & 255);\n                    if (s.gzhead.extra && s.gzhead.extra.length) {\n                        put_byte(s, s.gzhead.extra.length & 255);\n                        put_byte(s, s.gzhead.extra.length >> 8 & 255);\n                    }\n                    if (s.gzhead.hcrc) {\n                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n                    }\n                    s.gzindex = 0;\n                    s.status = EXTRA_STATE;\n                }\n            } else {\n                let header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;\n                let level_flags = -1;\n                if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n                    level_flags = 0;\n                } else if (s.level < 6) {\n                    level_flags = 1;\n                } else if (s.level === 6) {\n                    level_flags = 2;\n                } else {\n                    level_flags = 3;\n                }\n                header |= level_flags << 6;\n                if (s.strstart !== 0) {\n                    header |= PRESET_DICT;\n                }\n                header += 31 - header % 31;\n                s.status = BUSY_STATE;\n                putShortMSB(s, header);\n                if (s.strstart !== 0) {\n                    putShortMSB(s, strm.adler >>> 16);\n                    putShortMSB(s, strm.adler & 65535);\n                }\n                strm.adler = 1;\n            }\n        }\n        if (s.status === EXTRA_STATE) {\n            if (s.gzhead.extra) {\n                beg = s.pending;\n                while (s.gzindex < (s.gzhead.extra.length & 65535)) {\n                    if (s.pending === s.pending_buf_size) {\n                        if (s.gzhead.hcrc && s.pending > beg) {\n                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                        }\n                        flush_pending(strm);\n                        beg = s.pending;\n                        if (s.pending === s.pending_buf_size) {\n                            break;\n                        }\n                    }\n                    put_byte(s, s.gzhead.extra[s.gzindex] & 255);\n                    s.gzindex++;\n                }\n                if (s.gzhead.hcrc && s.pending > beg) {\n                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                }\n                if (s.gzindex === s.gzhead.extra.length) {\n                    s.gzindex = 0;\n                    s.status = NAME_STATE;\n                }\n            } else {\n                s.status = NAME_STATE;\n            }\n        }\n        if (s.status === NAME_STATE) {\n            if (s.gzhead.name) {\n                beg = s.pending;\n                do {\n                    if (s.pending === s.pending_buf_size) {\n                        if (s.gzhead.hcrc && s.pending > beg) {\n                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                        }\n                        flush_pending(strm);\n                        beg = s.pending;\n                        if (s.pending === s.pending_buf_size) {\n                            val = 1;\n                            break;\n                        }\n                    }\n                    if (s.gzindex < s.gzhead.name.length) {\n                        val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;\n                    } else {\n                        val = 0;\n                    }\n                    put_byte(s, val);\n                } while (val !== 0);\n                if (s.gzhead.hcrc && s.pending > beg) {\n                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                }\n                if (val === 0) {\n                    s.gzindex = 0;\n                    s.status = COMMENT_STATE;\n                }\n            } else {\n                s.status = COMMENT_STATE;\n            }\n        }\n        if (s.status === COMMENT_STATE) {\n            if (s.gzhead.comment) {\n                beg = s.pending;\n                do {\n                    if (s.pending === s.pending_buf_size) {\n                        if (s.gzhead.hcrc && s.pending > beg) {\n                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                        }\n                        flush_pending(strm);\n                        beg = s.pending;\n                        if (s.pending === s.pending_buf_size) {\n                            val = 1;\n                            break;\n                        }\n                    }\n                    if (s.gzindex < s.gzhead.comment.length) {\n                        val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;\n                    } else {\n                        val = 0;\n                    }\n                    put_byte(s, val);\n                } while (val !== 0);\n                if (s.gzhead.hcrc && s.pending > beg) {\n                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n                }\n                if (val === 0) {\n                    s.status = HCRC_STATE;\n                }\n            } else {\n                s.status = HCRC_STATE;\n            }\n        }\n        if (s.status === HCRC_STATE) {\n            if (s.gzhead.hcrc) {\n                if (s.pending + 2 > s.pending_buf_size) {\n                    flush_pending(strm);\n                }\n                if (s.pending + 2 <= s.pending_buf_size) {\n                    put_byte(s, strm.adler & 255);\n                    put_byte(s, strm.adler >> 8 & 255);\n                    strm.adler = 0;\n                    s.status = BUSY_STATE;\n                }\n            } else {\n                s.status = BUSY_STATE;\n            }\n        }\n        if (s.pending !== 0) {\n            flush_pending(strm);\n            if (strm.avail_out === 0) {\n                s.last_flush = -1;\n                return Z_OK;\n            }\n        } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {\n            return err(strm, Z_BUF_ERROR);\n        }\n        if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n            return err(strm, Z_BUF_ERROR);\n        }\n        if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {\n            let bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);\n            if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n                s.status = FINISH_STATE;\n            }\n            if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n                if (strm.avail_out === 0) {\n                    s.last_flush = -1;\n                }\n                return Z_OK;\n            }\n            if (bstate === BS_BLOCK_DONE) {\n                if (flush === Z_PARTIAL_FLUSH) {\n                    _tr_align(s);\n                } else if (flush !== Z_BLOCK) {\n                    _tr_stored_block(s, 0, 0, false);\n                    if (flush === Z_FULL_FLUSH) {\n                        zero(s.head);\n                        if (s.lookahead === 0) {\n                            s.strstart = 0;\n                            s.block_start = 0;\n                            s.insert = 0;\n                        }\n                    }\n                }\n                flush_pending(strm);\n                if (strm.avail_out === 0) {\n                    s.last_flush = -1;\n                    return Z_OK;\n                }\n            }\n        }\n        if (flush !== Z_FINISH) {\n            return Z_OK;\n        }\n        if (s.wrap <= 0) {\n            return Z_STREAM_END;\n        }\n        if (s.wrap === 2) {\n            put_byte(s, strm.adler & 255);\n            put_byte(s, strm.adler >> 8 & 255);\n            put_byte(s, strm.adler >> 16 & 255);\n            put_byte(s, strm.adler >> 24 & 255);\n            put_byte(s, strm.total_in & 255);\n            put_byte(s, strm.total_in >> 8 & 255);\n            put_byte(s, strm.total_in >> 16 & 255);\n            put_byte(s, strm.total_in >> 24 & 255);\n        } else {\n            putShortMSB(s, strm.adler >>> 16);\n            putShortMSB(s, strm.adler & 65535);\n        }\n        flush_pending(strm);\n        if (s.wrap > 0) {\n            s.wrap = -s.wrap;\n        }\n        return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n    };\n    const deflateEnd = strm => {\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        const status = strm.state.status;\n        if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {\n            return err(strm, Z_STREAM_ERROR);\n        }\n        strm.state = null;\n        return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n    };\n    const deflateSetDictionary = (strm, dictionary) => {\n        let dictLength = dictionary.length;\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        const s = strm.state;\n        const wrap = s.wrap;\n        if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {\n            return Z_STREAM_ERROR;\n        }\n        if (wrap === 1) {\n            strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n        }\n        s.wrap = 0;\n        if (dictLength >= s.w_size) {\n            if (wrap === 0) {\n                zero(s.head);\n                s.strstart = 0;\n                s.block_start = 0;\n                s.insert = 0;\n            }\n            let tmpDict = new Uint8Array(s.w_size);\n            tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n            dictionary = tmpDict;\n            dictLength = s.w_size;\n        }\n        const avail = strm.avail_in;\n        const next = strm.next_in;\n        const input = strm.input;\n        strm.avail_in = dictLength;\n        strm.next_in = 0;\n        strm.input = dictionary;\n        fill_window(s);\n        while (s.lookahead >= MIN_MATCH) {\n            let str = s.strstart;\n            let n = s.lookahead - (MIN_MATCH - 1);\n            do {\n                s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n                s.prev[str & s.w_mask] = s.head[s.ins_h];\n                s.head[s.ins_h] = str;\n                str++;\n            } while (--n);\n            s.strstart = str;\n            s.lookahead = MIN_MATCH - 1;\n            fill_window(s);\n        }\n        s.strstart += s.lookahead;\n        s.block_start = s.strstart;\n        s.insert = s.lookahead;\n        s.lookahead = 0;\n        s.match_length = s.prev_length = MIN_MATCH - 1;\n        s.match_available = 0;\n        strm.next_in = next;\n        strm.input = input;\n        strm.avail_in = avail;\n        s.wrap = wrap;\n        return Z_OK;\n    };\n\n    return {\n      deflateInit,\n      deflateInit2,\n      deflateReset,\n      deflateResetKeep,\n      deflateSetHeader,\n      deflate,\n      deflateEnd,\n      deflateSetDictionary,\n      deflateInfo : 'pako deflate (from Nodeca project)'\n    };\n\n});\ndefine('skylark-pako/utils/common',[], function () {\n\n\n    const _has = (obj, key) => {\n        return Object.prototype.hasOwnProperty.call(obj, key);\n    };\n\n    function assign(obj) {\n        const sources = Array.prototype.slice.call(arguments, 1);\n        while (sources.length) {\n            const source = sources.shift();\n            if (!source) {\n                continue;\n            }\n            if (typeof source !== 'object') {\n                throw new TypeError(source + 'must be non-object');\n            }\n            for (const p in source) {\n                if (_has(source, p)) {\n                    obj[p] = source[p];\n                }\n            }\n        }\n        return obj;\n    }\n\n    function flattenChunks(chunks){\n        let len = 0;\n        for (let i = 0, l = chunks.length; i < l; i++) {\n            len += chunks[i].length;\n        }\n        const result = new Uint8Array(len);\n        for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n            let chunk = chunks[i];\n            result.set(chunk, pos);\n            pos += chunk.length;\n        }\n        return result;\n    };\n\n    return {\n      assign,\n      flattenChunks\n    };\n});\ndefine('skylark-pako/utils/strings',[], function () {\n    'use strict';\n    var exports = {};\n\n    let STR_APPLY_UIA_OK = true;\n    try {\n        String.fromCharCode.apply(null, new Uint8Array(1));\n    } catch (__) {\n        STR_APPLY_UIA_OK = false;\n    }\n\n    const _utf8len = new Uint8Array(256);\n    for (let q = 0; q < 256; q++) {\n        _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;\n    }\n    _utf8len[254] = _utf8len[254] = 1;\n\n    function string2buf(str){\n        if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n            return new TextEncoder().encode(str);\n        }\n        let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n        for (m_pos = 0; m_pos < str_len; m_pos++) {\n            c = str.charCodeAt(m_pos);\n            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {\n                c2 = str.charCodeAt(m_pos + 1);\n                if ((c2 & 64512) === 56320) {\n                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);\n                    m_pos++;\n                }\n            }\n            buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;\n        }\n        buf = new Uint8Array(buf_len);\n        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n            c = str.charCodeAt(m_pos);\n            if ((c & 64512) === 55296 && m_pos + 1 < str_len) {\n                c2 = str.charCodeAt(m_pos + 1);\n                if ((c2 & 64512) === 56320) {\n                    c = 65536 + (c - 55296 << 10) + (c2 - 56320);\n                    m_pos++;\n                }\n            }\n            if (c < 128) {\n                buf[i++] = c;\n            } else if (c < 2048) {\n                buf[i++] = 192 | c >>> 6;\n                buf[i++] = 128 | c & 63;\n            } else if (c < 65536) {\n                buf[i++] = 224 | c >>> 12;\n                buf[i++] = 128 | c >>> 6 & 63;\n                buf[i++] = 128 | c & 63;\n            } else {\n                buf[i++] = 240 | c >>> 18;\n                buf[i++] = 128 | c >>> 12 & 63;\n                buf[i++] = 128 | c >>> 6 & 63;\n                buf[i++] = 128 | c & 63;\n            }\n        }\n        return buf;\n    }\n\n    const buf2binstring = (buf, len) => {\n        if (len < 65534) {\n            if (buf.subarray && STR_APPLY_UIA_OK) {\n                return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n            }\n        }\n        let result = '';\n        for (let i = 0; i < len; i++) {\n            result += String.fromCharCode(buf[i]);\n        }\n        return result;\n    };\n    \n    function buf2string (buf, max) {\n        const len = max || buf.length;\n        if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n            return new TextDecoder().decode(buf.subarray(0, max));\n        }\n        let i, out;\n        const utf16buf = new Array(len * 2);\n        for (out = 0, i = 0; i < len;) {\n            let c = buf[i++];\n            if (c < 128) {\n                utf16buf[out++] = c;\n                continue;\n            }\n            let c_len = _utf8len[c];\n            if (c_len > 4) {\n                utf16buf[out++] = 65533;\n                i += c_len - 1;\n                continue;\n            }\n            c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;\n            while (c_len > 1 && i < len) {\n                c = c << 6 | buf[i++] & 63;\n                c_len--;\n            }\n            if (c_len > 1) {\n                utf16buf[out++] = 65533;\n                continue;\n            }\n            if (c < 65536) {\n                utf16buf[out++] = c;\n            } else {\n                c -= 65536;\n                utf16buf[out++] = 55296 | c >> 10 & 1023;\n                utf16buf[out++] = 56320 | c & 1023;\n            }\n        }\n        return buf2binstring(utf16buf, out);\n    }\n\n    function utf8border(buf, max) {\n        max = max || buf.length;\n        if (max > buf.length) {\n            max = buf.length;\n        }\n        let pos = max - 1;\n        while (pos >= 0 && (buf[pos] & 192) === 128) {\n            pos--;\n        }\n        if (pos < 0) {\n            return max;\n        }\n        if (pos === 0) {\n            return max;\n        }\n        return pos + _utf8len[buf[pos]] > max ? pos : max;\n    }\n\n    return {\n      string2buf,\n      buf2string,\n      utf8border\n    };\n});\ndefine('skylark-pako/zlib/zstream',[], function () {\n    'use strict';\n\n    function ZStream() {\n        this.input = null;\n        this.next_in = 0;\n        this.avail_in = 0;\n        this.total_in = 0;\n        this.output = null;\n        this.next_out = 0;\n        this.avail_out = 0;\n        this.total_out = 0;\n        this.msg = '';\n        this.state = null;\n        this.data_type = 2;\n        this.adler = 0;\n    }\n\n    return ZStream;\n\n});\ndefine('skylark-pako/deflates',[\n    './zlib/deflate',\n    './utils/common',\n    './utils/strings',\n    './zlib/messages',\n    './zlib/zstream',\n    './zlib/constants'\n], function (zlib_deflate, utils, strings, msg, ZStream, constants) {\n    'use strict';\n\n    const toString = Object.prototype.toString;\n    const {Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_OK, Z_STREAM_END, Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY, Z_DEFLATED} = constants;\n\n    function Deflate(options) {\n        this.options = utils.assign({\n            level: Z_DEFAULT_COMPRESSION,\n            method: Z_DEFLATED,\n            chunkSize: 16384,\n            windowBits: 15,\n            memLevel: 8,\n            strategy: Z_DEFAULT_STRATEGY\n        }, options || {});\n        let opt = this.options;\n        if (opt.raw && opt.windowBits > 0) {\n            opt.windowBits = -opt.windowBits;\n        } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {\n            opt.windowBits += 16;\n        }\n        this.err = 0;\n        this.msg = '';\n        this.ended = false;\n        this.chunks = [];\n        this.strm = new ZStream();\n        this.strm.avail_out = 0;\n        let status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n        if (status !== Z_OK) {\n            throw new Error(msg[status]);\n        }\n        if (opt.header) {\n            zlib_deflate.deflateSetHeader(this.strm, opt.header);\n        }\n        if (opt.dictionary) {\n            let dict;\n            if (typeof opt.dictionary === 'string') {\n                dict = strings.string2buf(opt.dictionary);\n            } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n                dict = new Uint8Array(opt.dictionary);\n            } else {\n                dict = opt.dictionary;\n            }\n            status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n            if (status !== Z_OK) {\n                throw new Error(msg[status]);\n            }\n            this._dict_set = true;\n        }\n    }\n    Deflate.prototype.push = function (data, flush_mode) {\n        const strm = this.strm;\n        const chunkSize = this.options.chunkSize;\n        let status, _flush_mode;\n        if (this.ended) {\n            return false;\n        }\n        if (flush_mode === ~~flush_mode)\n            _flush_mode = flush_mode;\n        else\n            _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n        if (typeof data === 'string') {\n            strm.input = strings.string2buf(data);\n        } else if (toString.call(data) === '[object ArrayBuffer]') {\n            strm.input = new Uint8Array(data);\n        } else {\n            strm.input = data;\n        }\n        strm.next_in = 0;\n        strm.avail_in = strm.input.length;\n        for (;;) {\n            if (strm.avail_out === 0) {\n                strm.output = new Uint8Array(chunkSize);\n                strm.next_out = 0;\n                strm.avail_out = chunkSize;\n            }\n            if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n                this.onData(strm.output.subarray(0, strm.next_out));\n                strm.avail_out = 0;\n                continue;\n            }\n            status = zlib_deflate.deflate(strm, _flush_mode);\n            if (status === Z_STREAM_END) {\n                if (strm.next_out > 0) {\n                    this.onData(strm.output.subarray(0, strm.next_out));\n                }\n                status = zlib_deflate.deflateEnd(this.strm);\n                this.onEnd(status);\n                this.ended = true;\n                return status === Z_OK;\n            }\n            if (strm.avail_out === 0) {\n                this.onData(strm.output);\n                continue;\n            }\n            if (_flush_mode > 0 && strm.next_out > 0) {\n                this.onData(strm.output.subarray(0, strm.next_out));\n                strm.avail_out = 0;\n                continue;\n            }\n            if (strm.avail_in === 0)\n                break;\n        }\n        return true;\n    };\n    Deflate.prototype.onData = function (chunk) {\n        this.chunks.push(chunk);\n    };\n    Deflate.prototype.onEnd = function (status) {\n        if (status === Z_OK) {\n            this.result = utils.flattenChunks(this.chunks);\n        }\n        this.chunks = [];\n        this.err = status;\n        this.msg = this.strm.msg;\n    };\n    function deflate(input, options) {\n        const deflator = new Deflate(options);\n        deflator.push(input, true);\n        if (deflator.err) {\n            throw deflator.msg || msg[deflator.err];\n        }\n        return deflator.result;\n    }\n    function deflateRaw(input, options) {\n        options = options || {};\n        options.raw = true;\n        return deflate(input, options);\n    }\n    function gzip(input, options) {\n        options = options || {};\n        options.gzip = true;\n        return deflate(input, options);\n    }\n\n    return {\n        Deflate,\n        deflate,\n        deflateRaw,\n        gzip,\n        constants\n    };\n\n});\ndefine('skylark-pako/zlib/inffast',[], function () {\n    'use strict';\n\n    const BAD = 30;\n    const TYPE = 12;\n    function inflate_fast(strm, start) {\n        let _in;\n        let last;\n        let _out;\n        let beg;\n        let end;\n        let dmax;\n        let wsize;\n        let whave;\n        let wnext;\n        let s_window;\n        let hold;\n        let bits;\n        let lcode;\n        let dcode;\n        let lmask;\n        let dmask;\n        let here;\n        let op;\n        let len;\n        let dist;\n        let from;\n        let from_source;\n        let input, output;\n        const state = strm.state;\n        _in = strm.next_in;\n        input = strm.input;\n        last = _in + (strm.avail_in - 5);\n        _out = strm.next_out;\n        output = strm.output;\n        beg = _out - (start - strm.avail_out);\n        end = _out + (strm.avail_out - 257);\n        dmax = state.dmax;\n        wsize = state.wsize;\n        whave = state.whave;\n        wnext = state.wnext;\n        s_window = state.window;\n        hold = state.hold;\n        bits = state.bits;\n        lcode = state.lencode;\n        dcode = state.distcode;\n        lmask = (1 << state.lenbits) - 1;\n        dmask = (1 << state.distbits) - 1;\n        top:\n            do {\n                if (bits < 15) {\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                }\n                here = lcode[hold & lmask];\n                dolen:\n                    for (;;) {\n                        op = here >>> 24;\n                        hold >>>= op;\n                        bits -= op;\n                        op = here >>> 16 & 255;\n                        if (op === 0) {\n                            output[_out++] = here & 65535;\n                        } else if (op & 16) {\n                            len = here & 65535;\n                            op &= 15;\n                            if (op) {\n                                if (bits < op) {\n                                    hold += input[_in++] << bits;\n                                    bits += 8;\n                                }\n                                len += hold & (1 << op) - 1;\n                                hold >>>= op;\n                                bits -= op;\n                            }\n                            if (bits < 15) {\n                                hold += input[_in++] << bits;\n                                bits += 8;\n                                hold += input[_in++] << bits;\n                                bits += 8;\n                            }\n                            here = dcode[hold & dmask];\n                            dodist:\n                                for (;;) {\n                                    op = here >>> 24;\n                                    hold >>>= op;\n                                    bits -= op;\n                                    op = here >>> 16 & 255;\n                                    if (op & 16) {\n                                        dist = here & 65535;\n                                        op &= 15;\n                                        if (bits < op) {\n                                            hold += input[_in++] << bits;\n                                            bits += 8;\n                                            if (bits < op) {\n                                                hold += input[_in++] << bits;\n                                                bits += 8;\n                                            }\n                                        }\n                                        dist += hold & (1 << op) - 1;\n                                        if (dist > dmax) {\n                                            strm.msg = 'invalid distance too far back';\n                                            state.mode = BAD;\n                                            break top;\n                                        }\n                                        hold >>>= op;\n                                        bits -= op;\n                                        op = _out - beg;\n                                        if (dist > op) {\n                                            op = dist - op;\n                                            if (op > whave) {\n                                                if (state.sane) {\n                                                    strm.msg = 'invalid distance too far back';\n                                                    state.mode = BAD;\n                                                    break top;\n                                                }\n                                            }\n                                            from = 0;\n                                            from_source = s_window;\n                                            if (wnext === 0) {\n                                                from += wsize - op;\n                                                if (op < len) {\n                                                    len -= op;\n                                                    do {\n                                                        output[_out++] = s_window[from++];\n                                                    } while (--op);\n                                                    from = _out - dist;\n                                                    from_source = output;\n                                                }\n                                            } else if (wnext < op) {\n                                                from += wsize + wnext - op;\n                                                op -= wnext;\n                                                if (op < len) {\n                                                    len -= op;\n                                                    do {\n                                                        output[_out++] = s_window[from++];\n                                                    } while (--op);\n                                                    from = 0;\n                                                    if (wnext < len) {\n                                                        op = wnext;\n                                                        len -= op;\n                                                        do {\n                                                            output[_out++] = s_window[from++];\n                                                        } while (--op);\n                                                        from = _out - dist;\n                                                        from_source = output;\n                                                    }\n                                                }\n                                            } else {\n                                                from += wnext - op;\n                                                if (op < len) {\n                                                    len -= op;\n                                                    do {\n                                                        output[_out++] = s_window[from++];\n                                                    } while (--op);\n                                                    from = _out - dist;\n                                                    from_source = output;\n                                                }\n                                            }\n                                            while (len > 2) {\n                                                output[_out++] = from_source[from++];\n                                                output[_out++] = from_source[from++];\n                                                output[_out++] = from_source[from++];\n                                                len -= 3;\n                                            }\n                                            if (len) {\n                                                output[_out++] = from_source[from++];\n                                                if (len > 1) {\n                                                    output[_out++] = from_source[from++];\n                                                }\n                                            }\n                                        } else {\n                                            from = _out - dist;\n                                            do {\n                                                output[_out++] = output[from++];\n                                                output[_out++] = output[from++];\n                                                output[_out++] = output[from++];\n                                                len -= 3;\n                                            } while (len > 2);\n                                            if (len) {\n                                                output[_out++] = output[from++];\n                                                if (len > 1) {\n                                                    output[_out++] = output[from++];\n                                                }\n                                            }\n                                        }\n                                    } else if ((op & 64) === 0) {\n                                        here = dcode[(here & 65535) + (hold & (1 << op) - 1)];\n                                        continue dodist;\n                                    } else {\n                                        strm.msg = 'invalid distance code';\n                                        state.mode = BAD;\n                                        break top;\n                                    }\n                                    break;\n                                }\n                        } else if ((op & 64) === 0) {\n                            here = lcode[(here & 65535) + (hold & (1 << op) - 1)];\n                            continue dolen;\n                        } else if (op & 32) {\n                            state.mode = TYPE;\n                            break top;\n                        } else {\n                            strm.msg = 'invalid literal/length code';\n                            state.mode = BAD;\n                            break top;\n                        }\n                        break;\n                    }\n            } while (_in < last && _out < end);\n        len = bits >> 3;\n        _in -= len;\n        bits -= len << 3;\n        hold &= (1 << bits) - 1;\n        strm.next_in = _in;\n        strm.next_out = _out;\n        strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);\n        strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);\n        state.hold = hold;\n        state.bits = bits;\n        return;\n    };\n\n    return inflate_fast;\n});\ndefine('skylark-pako/zlib/inftrees',[], function () {\n    'use strict';\n\n    const MAXBITS = 15;\n    const ENOUGH_LENS = 852;\n    const ENOUGH_DISTS = 592;\n    const CODES = 0;\n    const LENS = 1;\n    const DISTS = 2;\n    const lbase = new Uint16Array([\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        13,\n        15,\n        17,\n        19,\n        23,\n        27,\n        31,\n        35,\n        43,\n        51,\n        59,\n        67,\n        83,\n        99,\n        115,\n        131,\n        163,\n        195,\n        227,\n        258,\n        0,\n        0\n    ]);\n    const lext = new Uint8Array([\n        16,\n        16,\n        16,\n        16,\n        16,\n        16,\n        16,\n        16,\n        17,\n        17,\n        17,\n        17,\n        18,\n        18,\n        18,\n        18,\n        19,\n        19,\n        19,\n        19,\n        20,\n        20,\n        20,\n        20,\n        21,\n        21,\n        21,\n        21,\n        16,\n        72,\n        78\n    ]);\n    const dbase = new Uint16Array([\n        1,\n        2,\n        3,\n        4,\n        5,\n        7,\n        9,\n        13,\n        17,\n        25,\n        33,\n        49,\n        65,\n        97,\n        129,\n        193,\n        257,\n        385,\n        513,\n        769,\n        1025,\n        1537,\n        2049,\n        3073,\n        4097,\n        6145,\n        8193,\n        12289,\n        16385,\n        24577,\n        0,\n        0\n    ]);\n    const dext = new Uint8Array([\n        16,\n        16,\n        16,\n        16,\n        17,\n        17,\n        18,\n        18,\n        19,\n        19,\n        20,\n        20,\n        21,\n        21,\n        22,\n        22,\n        23,\n        23,\n        24,\n        24,\n        25,\n        25,\n        26,\n        26,\n        27,\n        27,\n        28,\n        28,\n        29,\n        29,\n        64,\n        64\n    ]);\n    const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {\n        const bits = opts.bits;\n        let len = 0;\n        let sym = 0;\n        let min = 0, max = 0;\n        let root = 0;\n        let curr = 0;\n        let drop = 0;\n        let left = 0;\n        let used = 0;\n        let huff = 0;\n        let incr;\n        let fill;\n        let low;\n        let mask;\n        let next;\n        let base = null;\n        let base_index = 0;\n        let end;\n        const count = new Uint16Array(MAXBITS + 1);\n        const offs = new Uint16Array(MAXBITS + 1);\n        let extra = null;\n        let extra_index = 0;\n        let here_bits, here_op, here_val;\n        for (len = 0; len <= MAXBITS; len++) {\n            count[len] = 0;\n        }\n        for (sym = 0; sym < codes; sym++) {\n            count[lens[lens_index + sym]]++;\n        }\n        root = bits;\n        for (max = MAXBITS; max >= 1; max--) {\n            if (count[max] !== 0) {\n                break;\n            }\n        }\n        if (root > max) {\n            root = max;\n        }\n        if (max === 0) {\n            table[table_index++] = 1 << 24 | 64 << 16 | 0;\n            table[table_index++] = 1 << 24 | 64 << 16 | 0;\n            opts.bits = 1;\n            return 0;\n        }\n        for (min = 1; min < max; min++) {\n            if (count[min] !== 0) {\n                break;\n            }\n        }\n        if (root < min) {\n            root = min;\n        }\n        left = 1;\n        for (len = 1; len <= MAXBITS; len++) {\n            left <<= 1;\n            left -= count[len];\n            if (left < 0) {\n                return -1;\n            }\n        }\n        if (left > 0 && (type === CODES || max !== 1)) {\n            return -1;\n        }\n        offs[1] = 0;\n        for (len = 1; len < MAXBITS; len++) {\n            offs[len + 1] = offs[len] + count[len];\n        }\n        for (sym = 0; sym < codes; sym++) {\n            if (lens[lens_index + sym] !== 0) {\n                work[offs[lens[lens_index + sym]]++] = sym;\n            }\n        }\n        if (type === CODES) {\n            base = extra = work;\n            end = 19;\n        } else if (type === LENS) {\n            base = lbase;\n            base_index -= 257;\n            extra = lext;\n            extra_index -= 257;\n            end = 256;\n        } else {\n            base = dbase;\n            extra = dext;\n            end = -1;\n        }\n        huff = 0;\n        sym = 0;\n        len = min;\n        next = table_index;\n        curr = root;\n        drop = 0;\n        low = -1;\n        used = 1 << root;\n        mask = used - 1;\n        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {\n            return 1;\n        }\n        for (;;) {\n            here_bits = len - drop;\n            if (work[sym] < end) {\n                here_op = 0;\n                here_val = work[sym];\n            } else if (work[sym] > end) {\n                here_op = extra[extra_index + work[sym]];\n                here_val = base[base_index + work[sym]];\n            } else {\n                here_op = 32 + 64;\n                here_val = 0;\n            }\n            incr = 1 << len - drop;\n            fill = 1 << curr;\n            min = fill;\n            do {\n                fill -= incr;\n                table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;\n            } while (fill !== 0);\n            incr = 1 << len - 1;\n            while (huff & incr) {\n                incr >>= 1;\n            }\n            if (incr !== 0) {\n                huff &= incr - 1;\n                huff += incr;\n            } else {\n                huff = 0;\n            }\n            sym++;\n            if (--count[len] === 0) {\n                if (len === max) {\n                    break;\n                }\n                len = lens[lens_index + work[sym]];\n            }\n            if (len > root && (huff & mask) !== low) {\n                if (drop === 0) {\n                    drop = root;\n                }\n                next += min;\n                curr = len - drop;\n                left = 1 << curr;\n                while (curr + drop < max) {\n                    left -= count[curr + drop];\n                    if (left <= 0) {\n                        break;\n                    }\n                    curr++;\n                    left <<= 1;\n                }\n                used += 1 << curr;\n                if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {\n                    return 1;\n                }\n                low = huff & mask;\n                table[low] = root << 24 | curr << 16 | next - table_index | 0;\n            }\n        }\n        if (huff !== 0) {\n            table[next + huff] = len - drop << 24 | 64 << 16 | 0;\n        }\n        opts.bits = root;\n        return 0;\n    };\n\n   return inflate_table;\n\n});\ndefine('skylark-pako/zlib/inflate',[\n    './adler32',\n    './crc32',\n    './inffast',\n    './inftrees',\n    './constants'\n], function (adler32, crc32, inflate_fast, inflate_table, constants) {\n    'use strict';\n\n    const CODES = 0;\n    const LENS = 1;\n    const DISTS = 2;\n    const {Z_FINISH, Z_BLOCK, Z_TREES, Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR, Z_DEFLATED} = __module__4;\n    const HEAD = 1;\n    const FLAGS = 2;\n    const TIME = 3;\n    const OS = 4;\n    const EXLEN = 5;\n    const EXTRA = 6;\n    const NAME = 7;\n    const COMMENT = 8;\n    const HCRC = 9;\n    const DICTID = 10;\n    const DICT = 11;\n    const TYPE = 12;\n    const TYPEDO = 13;\n    const STORED = 14;\n    const COPY_ = 15;\n    const COPY = 16;\n    const TABLE = 17;\n    const LENLENS = 18;\n    const CODELENS = 19;\n    const LEN_ = 20;\n    const LEN = 21;\n    const LENEXT = 22;\n    const DIST = 23;\n    const DISTEXT = 24;\n    const MATCH = 25;\n    const LIT = 26;\n    const CHECK = 27;\n    const LENGTH = 28;\n    const DONE = 29;\n    const BAD = 30;\n    const MEM = 31;\n    const SYNC = 32;\n    const ENOUGH_LENS = 852;\n    const ENOUGH_DISTS = 592;\n    const MAX_WBITS = 15;\n    const DEF_WBITS = MAX_WBITS;\n    const zswap32 = q => {\n        return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);\n    };\n    function InflateState() {\n        this.mode = 0;\n        this.last = false;\n        this.wrap = 0;\n        this.havedict = false;\n        this.flags = 0;\n        this.dmax = 0;\n        this.check = 0;\n        this.total = 0;\n        this.head = null;\n        this.wbits = 0;\n        this.wsize = 0;\n        this.whave = 0;\n        this.wnext = 0;\n        this.window = null;\n        this.hold = 0;\n        this.bits = 0;\n        this.length = 0;\n        this.offset = 0;\n        this.extra = 0;\n        this.lencode = null;\n        this.distcode = null;\n        this.lenbits = 0;\n        this.distbits = 0;\n        this.ncode = 0;\n        this.nlen = 0;\n        this.ndist = 0;\n        this.have = 0;\n        this.next = null;\n        this.lens = new Uint16Array(320);\n        this.work = new Uint16Array(288);\n        this.lendyn = null;\n        this.distdyn = null;\n        this.sane = 0;\n        this.back = 0;\n        this.was = 0;\n    }\n    const inflateResetKeep = strm => {\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        const state = strm.state;\n        strm.total_in = strm.total_out = state.total = 0;\n        strm.msg = '';\n        if (state.wrap) {\n            strm.adler = state.wrap & 1;\n        }\n        state.mode = HEAD;\n        state.last = 0;\n        state.havedict = 0;\n        state.dmax = 32768;\n        state.head = null;\n        state.hold = 0;\n        state.bits = 0;\n        state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n        state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n        state.sane = 1;\n        state.back = -1;\n        return Z_OK;\n    };\n    const inflateReset = strm => {\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        const state = strm.state;\n        state.wsize = 0;\n        state.whave = 0;\n        state.wnext = 0;\n        return inflateResetKeep(strm);\n    };\n    const inflateReset2 = (strm, windowBits) => {\n        let wrap;\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        const state = strm.state;\n        if (windowBits < 0) {\n            wrap = 0;\n            windowBits = -windowBits;\n        } else {\n            wrap = (windowBits >> 4) + 1;\n            if (windowBits < 48) {\n                windowBits &= 15;\n            }\n        }\n        if (windowBits && (windowBits < 8 || windowBits > 15)) {\n            return Z_STREAM_ERROR;\n        }\n        if (state.window !== null && state.wbits !== windowBits) {\n            state.window = null;\n        }\n        state.wrap = wrap;\n        state.wbits = windowBits;\n        return inflateReset(strm);\n    };\n    const inflateInit2 = (strm, windowBits) => {\n        if (!strm) {\n            return Z_STREAM_ERROR;\n        }\n        const state = new InflateState();\n        strm.state = state;\n        state.window = null;\n        const ret = inflateReset2(strm, windowBits);\n        if (ret !== Z_OK) {\n            strm.state = null;\n        }\n        return ret;\n    };\n    const inflateInit = strm => {\n        return inflateInit2(strm, DEF_WBITS);\n    };\n    let virgin = true;\n    let lenfix, distfix;\n    const fixedtables = state => {\n        if (virgin) {\n            lenfix = new Int32Array(512);\n            distfix = new Int32Array(32);\n            let sym = 0;\n            while (sym < 144) {\n                state.lens[sym++] = 8;\n            }\n            while (sym < 256) {\n                state.lens[sym++] = 9;\n            }\n            while (sym < 280) {\n                state.lens[sym++] = 7;\n            }\n            while (sym < 288) {\n                state.lens[sym++] = 8;\n            }\n            inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });\n            sym = 0;\n            while (sym < 32) {\n                state.lens[sym++] = 5;\n            }\n            inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });\n            virgin = false;\n        }\n        state.lencode = lenfix;\n        state.lenbits = 9;\n        state.distcode = distfix;\n        state.distbits = 5;\n    };\n    const updatewindow = (strm, src, end, copy) => {\n        let dist;\n        const state = strm.state;\n        if (state.window === null) {\n            state.wsize = 1 << state.wbits;\n            state.wnext = 0;\n            state.whave = 0;\n            state.window = new Uint8Array(state.wsize);\n        }\n        if (copy >= state.wsize) {\n            state.window.set(src.subarray(end - state.wsize, end), 0);\n            state.wnext = 0;\n            state.whave = state.wsize;\n        } else {\n            dist = state.wsize - state.wnext;\n            if (dist > copy) {\n                dist = copy;\n            }\n            state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n            copy -= dist;\n            if (copy) {\n                state.window.set(src.subarray(end - copy, end), 0);\n                state.wnext = copy;\n                state.whave = state.wsize;\n            } else {\n                state.wnext += dist;\n                if (state.wnext === state.wsize) {\n                    state.wnext = 0;\n                }\n                if (state.whave < state.wsize) {\n                    state.whave += dist;\n                }\n            }\n        }\n        return 0;\n    };\n    const inflate = (strm, flush) => {\n        let state;\n        let input, output;\n        let next;\n        let put;\n        let have, left;\n        let hold;\n        let bits;\n        let _in, _out;\n        let copy;\n        let from;\n        let from_source;\n        let here = 0;\n        let here_bits, here_op, here_val;\n        let last_bits, last_op, last_val;\n        let len;\n        let ret;\n        const hbuf = new Uint8Array(4);\n        let opts;\n        let n;\n        const order = new Uint8Array([\n            16,\n            17,\n            18,\n            0,\n            8,\n            7,\n            9,\n            6,\n            10,\n            5,\n            11,\n            4,\n            12,\n            3,\n            13,\n            2,\n            14,\n            1,\n            15\n        ]);\n        if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {\n            return Z_STREAM_ERROR;\n        }\n        state = strm.state;\n        if (state.mode === TYPE) {\n            state.mode = TYPEDO;\n        }\n        put = strm.next_out;\n        output = strm.output;\n        left = strm.avail_out;\n        next = strm.next_in;\n        input = strm.input;\n        have = strm.avail_in;\n        hold = state.hold;\n        bits = state.bits;\n        _in = have;\n        _out = left;\n        ret = Z_OK;\n        inf_leave:\n            for (;;) {\n                switch (state.mode) {\n                case HEAD:\n                    if (state.wrap === 0) {\n                        state.mode = TYPEDO;\n                        break;\n                    }\n                    while (bits < 16) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    if (state.wrap & 2 && hold === 35615) {\n                        state.check = 0;\n                        hbuf[0] = hold & 255;\n                        hbuf[1] = hold >>> 8 & 255;\n                        state.check = crc32(state.check, hbuf, 2, 0);\n                        hold = 0;\n                        bits = 0;\n                        state.mode = FLAGS;\n                        break;\n                    }\n                    state.flags = 0;\n                    if (state.head) {\n                        state.head.done = false;\n                    }\n                    if (!(state.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) {\n                        strm.msg = 'incorrect header check';\n                        state.mode = BAD;\n                        break;\n                    }\n                    if ((hold & 15) !== Z_DEFLATED) {\n                        strm.msg = 'unknown compression method';\n                        state.mode = BAD;\n                        break;\n                    }\n                    hold >>>= 4;\n                    bits -= 4;\n                    len = (hold & 15) + 8;\n                    if (state.wbits === 0) {\n                        state.wbits = len;\n                    } else if (len > state.wbits) {\n                        strm.msg = 'invalid window size';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.dmax = 1 << state.wbits;\n                    strm.adler = state.check = 1;\n                    state.mode = hold & 512 ? DICTID : TYPE;\n                    hold = 0;\n                    bits = 0;\n                    break;\n                case FLAGS:\n                    while (bits < 16) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    state.flags = hold;\n                    if ((state.flags & 255) !== Z_DEFLATED) {\n                        strm.msg = 'unknown compression method';\n                        state.mode = BAD;\n                        break;\n                    }\n                    if (state.flags & 57344) {\n                        strm.msg = 'unknown header flags set';\n                        state.mode = BAD;\n                        break;\n                    }\n                    if (state.head) {\n                        state.head.text = hold >> 8 & 1;\n                    }\n                    if (state.flags & 512) {\n                        hbuf[0] = hold & 255;\n                        hbuf[1] = hold >>> 8 & 255;\n                        state.check = crc32(state.check, hbuf, 2, 0);\n                    }\n                    hold = 0;\n                    bits = 0;\n                    state.mode = TIME;\n                case TIME:\n                    while (bits < 32) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    if (state.head) {\n                        state.head.time = hold;\n                    }\n                    if (state.flags & 512) {\n                        hbuf[0] = hold & 255;\n                        hbuf[1] = hold >>> 8 & 255;\n                        hbuf[2] = hold >>> 16 & 255;\n                        hbuf[3] = hold >>> 24 & 255;\n                        state.check = crc32(state.check, hbuf, 4, 0);\n                    }\n                    hold = 0;\n                    bits = 0;\n                    state.mode = OS;\n                case OS:\n                    while (bits < 16) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    if (state.head) {\n                        state.head.xflags = hold & 255;\n                        state.head.os = hold >> 8;\n                    }\n                    if (state.flags & 512) {\n                        hbuf[0] = hold & 255;\n                        hbuf[1] = hold >>> 8 & 255;\n                        state.check = crc32(state.check, hbuf, 2, 0);\n                    }\n                    hold = 0;\n                    bits = 0;\n                    state.mode = EXLEN;\n                case EXLEN:\n                    if (state.flags & 1024) {\n                        while (bits < 16) {\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        state.length = hold;\n                        if (state.head) {\n                            state.head.extra_len = hold;\n                        }\n                        if (state.flags & 512) {\n                            hbuf[0] = hold & 255;\n                            hbuf[1] = hold >>> 8 & 255;\n                            state.check = crc32(state.check, hbuf, 2, 0);\n                        }\n                        hold = 0;\n                        bits = 0;\n                    } else if (state.head) {\n                        state.head.extra = null;\n                    }\n                    state.mode = EXTRA;\n                case EXTRA:\n                    if (state.flags & 1024) {\n                        copy = state.length;\n                        if (copy > have) {\n                            copy = have;\n                        }\n                        if (copy) {\n                            if (state.head) {\n                                len = state.head.extra_len - state.length;\n                                if (!state.head.extra) {\n                                    state.head.extra = new Uint8Array(state.head.extra_len);\n                                }\n                                state.head.extra.set(input.subarray(next, next + copy), len);\n                            }\n                            if (state.flags & 512) {\n                                state.check = crc32(state.check, input, copy, next);\n                            }\n                            have -= copy;\n                            next += copy;\n                            state.length -= copy;\n                        }\n                        if (state.length) {\n                            break inf_leave;\n                        }\n                    }\n                    state.length = 0;\n                    state.mode = NAME;\n                case NAME:\n                    if (state.flags & 2048) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        copy = 0;\n                        do {\n                            len = input[next + copy++];\n                            if (state.head && len && state.length < 65536) {\n                                state.head.name += String.fromCharCode(len);\n                            }\n                        } while (len && copy < have);\n                        if (state.flags & 512) {\n                            state.check = crc32(state.check, input, copy, next);\n                        }\n                        have -= copy;\n                        next += copy;\n                        if (len) {\n                            break inf_leave;\n                        }\n                    } else if (state.head) {\n                        state.head.name = null;\n                    }\n                    state.length = 0;\n                    state.mode = COMMENT;\n                case COMMENT:\n                    if (state.flags & 4096) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        copy = 0;\n                        do {\n                            len = input[next + copy++];\n                            if (state.head && len && state.length < 65536) {\n                                state.head.comment += String.fromCharCode(len);\n                            }\n                        } while (len && copy < have);\n                        if (state.flags & 512) {\n                            state.check = crc32(state.check, input, copy, next);\n                        }\n                        have -= copy;\n                        next += copy;\n                        if (len) {\n                            break inf_leave;\n                        }\n                    } else if (state.head) {\n                        state.head.comment = null;\n                    }\n                    state.mode = HCRC;\n                case HCRC:\n                    if (state.flags & 512) {\n                        while (bits < 16) {\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        if (hold !== (state.check & 65535)) {\n                            strm.msg = 'header crc mismatch';\n                            state.mode = BAD;\n                            break;\n                        }\n                        hold = 0;\n                        bits = 0;\n                    }\n                    if (state.head) {\n                        state.head.hcrc = state.flags >> 9 & 1;\n                        state.head.done = true;\n                    }\n                    strm.adler = state.check = 0;\n                    state.mode = TYPE;\n                    break;\n                case DICTID:\n                    while (bits < 32) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    strm.adler = state.check = zswap32(hold);\n                    hold = 0;\n                    bits = 0;\n                    state.mode = DICT;\n                case DICT:\n                    if (state.havedict === 0) {\n                        strm.next_out = put;\n                        strm.avail_out = left;\n                        strm.next_in = next;\n                        strm.avail_in = have;\n                        state.hold = hold;\n                        state.bits = bits;\n                        return Z_NEED_DICT;\n                    }\n                    strm.adler = state.check = 1;\n                    state.mode = TYPE;\n                case TYPE:\n                    if (flush === Z_BLOCK || flush === Z_TREES) {\n                        break inf_leave;\n                    }\n                case TYPEDO:\n                    if (state.last) {\n                        hold >>>= bits & 7;\n                        bits -= bits & 7;\n                        state.mode = CHECK;\n                        break;\n                    }\n                    while (bits < 3) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    state.last = hold & 1;\n                    hold >>>= 1;\n                    bits -= 1;\n                    switch (hold & 3) {\n                    case 0:\n                        state.mode = STORED;\n                        break;\n                    case 1:\n                        fixedtables(state);\n                        state.mode = LEN_;\n                        if (flush === Z_TREES) {\n                            hold >>>= 2;\n                            bits -= 2;\n                            break inf_leave;\n                        }\n                        break;\n                    case 2:\n                        state.mode = TABLE;\n                        break;\n                    case 3:\n                        strm.msg = 'invalid block type';\n                        state.mode = BAD;\n                    }\n                    hold >>>= 2;\n                    bits -= 2;\n                    break;\n                case STORED:\n                    hold >>>= bits & 7;\n                    bits -= bits & 7;\n                    while (bits < 32) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {\n                        strm.msg = 'invalid stored block lengths';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.length = hold & 65535;\n                    hold = 0;\n                    bits = 0;\n                    state.mode = COPY_;\n                    if (flush === Z_TREES) {\n                        break inf_leave;\n                    }\n                case COPY_:\n                    state.mode = COPY;\n                case COPY:\n                    copy = state.length;\n                    if (copy) {\n                        if (copy > have) {\n                            copy = have;\n                        }\n                        if (copy > left) {\n                            copy = left;\n                        }\n                        if (copy === 0) {\n                            break inf_leave;\n                        }\n                        output.set(input.subarray(next, next + copy), put);\n                        have -= copy;\n                        next += copy;\n                        left -= copy;\n                        put += copy;\n                        state.length -= copy;\n                        break;\n                    }\n                    state.mode = TYPE;\n                    break;\n                case TABLE:\n                    while (bits < 14) {\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    state.nlen = (hold & 31) + 257;\n                    hold >>>= 5;\n                    bits -= 5;\n                    state.ndist = (hold & 31) + 1;\n                    hold >>>= 5;\n                    bits -= 5;\n                    state.ncode = (hold & 15) + 4;\n                    hold >>>= 4;\n                    bits -= 4;\n                    if (state.nlen > 286 || state.ndist > 30) {\n                        strm.msg = 'too many length or distance symbols';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.have = 0;\n                    state.mode = LENLENS;\n                case LENLENS:\n                    while (state.have < state.ncode) {\n                        while (bits < 3) {\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        state.lens[order[state.have++]] = hold & 7;\n                        hold >>>= 3;\n                        bits -= 3;\n                    }\n                    while (state.have < 19) {\n                        state.lens[order[state.have++]] = 0;\n                    }\n                    state.lencode = state.lendyn;\n                    state.lenbits = 7;\n                    opts = { bits: state.lenbits };\n                    ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n                    state.lenbits = opts.bits;\n                    if (ret) {\n                        strm.msg = 'invalid code lengths set';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.have = 0;\n                    state.mode = CODELENS;\n                case CODELENS:\n                    while (state.have < state.nlen + state.ndist) {\n                        for (;;) {\n                            here = state.lencode[hold & (1 << state.lenbits) - 1];\n                            here_bits = here >>> 24;\n                            here_op = here >>> 16 & 255;\n                            here_val = here & 65535;\n                            if (here_bits <= bits) {\n                                break;\n                            }\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        if (here_val < 16) {\n                            hold >>>= here_bits;\n                            bits -= here_bits;\n                            state.lens[state.have++] = here_val;\n                        } else {\n                            if (here_val === 16) {\n                                n = here_bits + 2;\n                                while (bits < n) {\n                                    if (have === 0) {\n                                        break inf_leave;\n                                    }\n                                    have--;\n                                    hold += input[next++] << bits;\n                                    bits += 8;\n                                }\n                                hold >>>= here_bits;\n                                bits -= here_bits;\n                                if (state.have === 0) {\n                                    strm.msg = 'invalid bit length repeat';\n                                    state.mode = BAD;\n                                    break;\n                                }\n                                len = state.lens[state.have - 1];\n                                copy = 3 + (hold & 3);\n                                hold >>>= 2;\n                                bits -= 2;\n                            } else if (here_val === 17) {\n                                n = here_bits + 3;\n                                while (bits < n) {\n                                    if (have === 0) {\n                                        break inf_leave;\n                                    }\n                                    have--;\n                                    hold += input[next++] << bits;\n                                    bits += 8;\n                                }\n                                hold >>>= here_bits;\n                                bits -= here_bits;\n                                len = 0;\n                                copy = 3 + (hold & 7);\n                                hold >>>= 3;\n                                bits -= 3;\n                            } else {\n                                n = here_bits + 7;\n                                while (bits < n) {\n                                    if (have === 0) {\n                                        break inf_leave;\n                                    }\n                                    have--;\n                                    hold += input[next++] << bits;\n                                    bits += 8;\n                                }\n                                hold >>>= here_bits;\n                                bits -= here_bits;\n                                len = 0;\n                                copy = 11 + (hold & 127);\n                                hold >>>= 7;\n                                bits -= 7;\n                            }\n                            if (state.have + copy > state.nlen + state.ndist) {\n                                strm.msg = 'invalid bit length repeat';\n                                state.mode = BAD;\n                                break;\n                            }\n                            while (copy--) {\n                                state.lens[state.have++] = len;\n                            }\n                        }\n                    }\n                    if (state.mode === BAD) {\n                        break;\n                    }\n                    if (state.lens[256] === 0) {\n                        strm.msg = 'invalid code -- missing end-of-block';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.lenbits = 9;\n                    opts = { bits: state.lenbits };\n                    ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n                    state.lenbits = opts.bits;\n                    if (ret) {\n                        strm.msg = 'invalid literal/lengths set';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.distbits = 6;\n                    state.distcode = state.distdyn;\n                    opts = { bits: state.distbits };\n                    ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n                    state.distbits = opts.bits;\n                    if (ret) {\n                        strm.msg = 'invalid distances set';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.mode = LEN_;\n                    if (flush === Z_TREES) {\n                        break inf_leave;\n                    }\n                case LEN_:\n                    state.mode = LEN;\n                case LEN:\n                    if (have >= 6 && left >= 258) {\n                        strm.next_out = put;\n                        strm.avail_out = left;\n                        strm.next_in = next;\n                        strm.avail_in = have;\n                        state.hold = hold;\n                        state.bits = bits;\n                        inflate_fast(strm, _out);\n                        put = strm.next_out;\n                        output = strm.output;\n                        left = strm.avail_out;\n                        next = strm.next_in;\n                        input = strm.input;\n                        have = strm.avail_in;\n                        hold = state.hold;\n                        bits = state.bits;\n                        if (state.mode === TYPE) {\n                            state.back = -1;\n                        }\n                        break;\n                    }\n                    state.back = 0;\n                    for (;;) {\n                        here = state.lencode[hold & (1 << state.lenbits) - 1];\n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 255;\n                        here_val = here & 65535;\n                        if (here_bits <= bits) {\n                            break;\n                        }\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    if (here_op && (here_op & 240) === 0) {\n                        last_bits = here_bits;\n                        last_op = here_op;\n                        last_val = here_val;\n                        for (;;) {\n                            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                            here_bits = here >>> 24;\n                            here_op = here >>> 16 & 255;\n                            here_val = here & 65535;\n                            if (last_bits + here_bits <= bits) {\n                                break;\n                            }\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        hold >>>= last_bits;\n                        bits -= last_bits;\n                        state.back += last_bits;\n                    }\n                    hold >>>= here_bits;\n                    bits -= here_bits;\n                    state.back += here_bits;\n                    state.length = here_val;\n                    if (here_op === 0) {\n                        state.mode = LIT;\n                        break;\n                    }\n                    if (here_op & 32) {\n                        state.back = -1;\n                        state.mode = TYPE;\n                        break;\n                    }\n                    if (here_op & 64) {\n                        strm.msg = 'invalid literal/length code';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.extra = here_op & 15;\n                    state.mode = LENEXT;\n                case LENEXT:\n                    if (state.extra) {\n                        n = state.extra;\n                        while (bits < n) {\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        state.length += hold & (1 << state.extra) - 1;\n                        hold >>>= state.extra;\n                        bits -= state.extra;\n                        state.back += state.extra;\n                    }\n                    state.was = state.length;\n                    state.mode = DIST;\n                case DIST:\n                    for (;;) {\n                        here = state.distcode[hold & (1 << state.distbits) - 1];\n                        here_bits = here >>> 24;\n                        here_op = here >>> 16 & 255;\n                        here_val = here & 65535;\n                        if (here_bits <= bits) {\n                            break;\n                        }\n                        if (have === 0) {\n                            break inf_leave;\n                        }\n                        have--;\n                        hold += input[next++] << bits;\n                        bits += 8;\n                    }\n                    if ((here_op & 240) === 0) {\n                        last_bits = here_bits;\n                        last_op = here_op;\n                        last_val = here_val;\n                        for (;;) {\n                            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];\n                            here_bits = here >>> 24;\n                            here_op = here >>> 16 & 255;\n                            here_val = here & 65535;\n                            if (last_bits + here_bits <= bits) {\n                                break;\n                            }\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        hold >>>= last_bits;\n                        bits -= last_bits;\n                        state.back += last_bits;\n                    }\n                    hold >>>= here_bits;\n                    bits -= here_bits;\n                    state.back += here_bits;\n                    if (here_op & 64) {\n                        strm.msg = 'invalid distance code';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.offset = here_val;\n                    state.extra = here_op & 15;\n                    state.mode = DISTEXT;\n                case DISTEXT:\n                    if (state.extra) {\n                        n = state.extra;\n                        while (bits < n) {\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        state.offset += hold & (1 << state.extra) - 1;\n                        hold >>>= state.extra;\n                        bits -= state.extra;\n                        state.back += state.extra;\n                    }\n                    if (state.offset > state.dmax) {\n                        strm.msg = 'invalid distance too far back';\n                        state.mode = BAD;\n                        break;\n                    }\n                    state.mode = MATCH;\n                case MATCH:\n                    if (left === 0) {\n                        break inf_leave;\n                    }\n                    copy = _out - left;\n                    if (state.offset > copy) {\n                        copy = state.offset - copy;\n                        if (copy > state.whave) {\n                            if (state.sane) {\n                                strm.msg = 'invalid distance too far back';\n                                state.mode = BAD;\n                                break;\n                            }\n                        }\n                        if (copy > state.wnext) {\n                            copy -= state.wnext;\n                            from = state.wsize - copy;\n                        } else {\n                            from = state.wnext - copy;\n                        }\n                        if (copy > state.length) {\n                            copy = state.length;\n                        }\n                        from_source = state.window;\n                    } else {\n                        from_source = output;\n                        from = put - state.offset;\n                        copy = state.length;\n                    }\n                    if (copy > left) {\n                        copy = left;\n                    }\n                    left -= copy;\n                    state.length -= copy;\n                    do {\n                        output[put++] = from_source[from++];\n                    } while (--copy);\n                    if (state.length === 0) {\n                        state.mode = LEN;\n                    }\n                    break;\n                case LIT:\n                    if (left === 0) {\n                        break inf_leave;\n                    }\n                    output[put++] = state.length;\n                    left--;\n                    state.mode = LEN;\n                    break;\n                case CHECK:\n                    if (state.wrap) {\n                        while (bits < 32) {\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold |= input[next++] << bits;\n                            bits += 8;\n                        }\n                        _out -= left;\n                        strm.total_out += _out;\n                        state.total += _out;\n                        if (_out) {\n                            strm.adler = state.check = state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);\n                        }\n                        _out = left;\n                        if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n                            strm.msg = 'incorrect data check';\n                            state.mode = BAD;\n                            break;\n                        }\n                        hold = 0;\n                        bits = 0;\n                    }\n                    state.mode = LENGTH;\n                case LENGTH:\n                    if (state.wrap && state.flags) {\n                        while (bits < 32) {\n                            if (have === 0) {\n                                break inf_leave;\n                            }\n                            have--;\n                            hold += input[next++] << bits;\n                            bits += 8;\n                        }\n                        if (hold !== (state.total & 4294967295)) {\n                            strm.msg = 'incorrect length check';\n                            state.mode = BAD;\n                            break;\n                        }\n                        hold = 0;\n                        bits = 0;\n                    }\n                    state.mode = DONE;\n                case DONE:\n                    ret = Z_STREAM_END;\n                    break inf_leave;\n                case BAD:\n                    ret = Z_DATA_ERROR;\n                    break inf_leave;\n                case MEM:\n                    return Z_MEM_ERROR;\n                case SYNC:\n                default:\n                    return Z_STREAM_ERROR;\n                }\n            }\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {\n            if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n                state.mode = MEM;\n                return Z_MEM_ERROR;\n            }\n        }\n        _in -= strm.avail_in;\n        _out -= strm.avail_out;\n        strm.total_in += _in;\n        strm.total_out += _out;\n        state.total += _out;\n        if (state.wrap && _out) {\n            strm.adler = state.check = state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);\n        }\n        strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n        if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {\n            ret = Z_BUF_ERROR;\n        }\n        return ret;\n    };\n    const inflateEnd = strm => {\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        let state = strm.state;\n        if (state.window) {\n            state.window = null;\n        }\n        strm.state = null;\n        return Z_OK;\n    };\n    const inflateGetHeader = (strm, head) => {\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        const state = strm.state;\n        if ((state.wrap & 2) === 0) {\n            return Z_STREAM_ERROR;\n        }\n        state.head = head;\n        head.done = false;\n        return Z_OK;\n    };\n    const inflateSetDictionary = (strm, dictionary) => {\n        const dictLength = dictionary.length;\n        let state;\n        let dictid;\n        let ret;\n        if (!strm || !strm.state) {\n            return Z_STREAM_ERROR;\n        }\n        state = strm.state;\n        if (state.wrap !== 0 && state.mode !== DICT) {\n            return Z_STREAM_ERROR;\n        }\n        if (state.mode === DICT) {\n            dictid = 1;\n            dictid = adler32(dictid, dictionary, dictLength, 0);\n            if (dictid !== state.check) {\n                return Z_DATA_ERROR;\n            }\n        }\n        ret = updatewindow(strm, dictionary, dictLength, dictLength);\n        if (ret) {\n            state.mode = MEM;\n            return Z_MEM_ERROR;\n        }\n        state.havedict = 1;\n        return Z_OK;\n    };\n\n\n    return {\n        inflateReset,\n        inflateReset2,\n        inflateResetKeep,\n        inflateInit,\n        inflateInit2,\n        inflate,\n        inflateEnd,\n        inflateGetHeader,\n        inflateSetDictionary,\n        inflateInfo : 'pako inflate (from Nodeca project)'\n    };\n});\ndefine('skylark-pako/zlib/gzheader',[], function () {\n    'use strict';\n\n    function GZheader() {\n        this.text = 0;\n        this.time = 0;\n        this.xflags = 0;\n        this.os = 0;\n        this.extra = null;\n        this.extra_len = 0;\n        this.name = '';\n        this.comment = '';\n        this.hcrc = 0;\n        this.done = false;\n    }\n\n    return  GZheader;\n\n});\ndefine('skylark-pako/inflates',[\n    './zlib/inflate',\n    './utils/common',\n    './utils/strings',\n    './zlib/messages',\n    './zlib/zstream',\n    './zlib/gzheader',\n    './zlib/constants'\n], function (zlib_inflate, utils, strings, msg, ZStream, GZheader, constants) {\n    'use strict';\n\n\n    const toString = Object.prototype.toString;\n    const {Z_NO_FLUSH, Z_FINISH, Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR} = constants;\n    function Inflate(options) {\n        this.options = utils.assign({\n            chunkSize: 1024 * 64,\n            windowBits: 15,\n            to: ''\n        }, options || {});\n        const opt = this.options;\n        if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n            opt.windowBits = -opt.windowBits;\n            if (opt.windowBits === 0) {\n                opt.windowBits = -15;\n            }\n        }\n        if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {\n            opt.windowBits += 32;\n        }\n        if (opt.windowBits > 15 && opt.windowBits < 48) {\n            if ((opt.windowBits & 15) === 0) {\n                opt.windowBits |= 15;\n            }\n        }\n        this.err = 0;\n        this.msg = '';\n        this.ended = false;\n        this.chunks = [];\n        this.strm = new ZStream();\n        this.strm.avail_out = 0;\n        let status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);\n        if (status !== Z_OK) {\n            throw new Error(msg[status]);\n        }\n        this.header = new GZheader();\n        zlib_inflate.inflateGetHeader(this.strm, this.header);\n        if (opt.dictionary) {\n            if (typeof opt.dictionary === 'string') {\n                opt.dictionary = strings.string2buf(opt.dictionary);\n            } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n                opt.dictionary = new Uint8Array(opt.dictionary);\n            }\n            if (opt.raw) {\n                status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n                if (status !== Z_OK) {\n                    throw new Error(msg[status]);\n                }\n            }\n        }\n    }\n    Inflate.prototype.push = function (data, flush_mode) {\n        const strm = this.strm;\n        const chunkSize = this.options.chunkSize;\n        const dictionary = this.options.dictionary;\n        let status, _flush_mode, last_avail_out;\n        if (this.ended)\n            return false;\n        if (flush_mode === ~~flush_mode)\n            _flush_mode = flush_mode;\n        else\n            _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n        if (toString.call(data) === '[object ArrayBuffer]') {\n            strm.input = new Uint8Array(data);\n        } else {\n            strm.input = data;\n        }\n        strm.next_in = 0;\n        strm.avail_in = strm.input.length;\n        for (;;) {\n            if (strm.avail_out === 0) {\n                strm.output = new Uint8Array(chunkSize);\n                strm.next_out = 0;\n                strm.avail_out = chunkSize;\n            }\n            status = zlib_inflate.inflate(strm, _flush_mode);\n            if (status === Z_NEED_DICT && dictionary) {\n                status = zlib_inflate.inflateSetDictionary(strm, dictionary);\n                if (status === Z_OK) {\n                    status = zlib_inflate.inflate(strm, _flush_mode);\n                } else if (status === Z_DATA_ERROR) {\n                    status = Z_NEED_DICT;\n                }\n            }\n            while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0) {\n                zlib_inflate.inflateReset(strm);\n                status = zlib_inflate.inflate(strm, _flush_mode);\n            }\n            switch (status) {\n            case Z_STREAM_ERROR:\n            case Z_DATA_ERROR:\n            case Z_NEED_DICT:\n            case Z_MEM_ERROR:\n                this.onEnd(status);\n                this.ended = true;\n                return false;\n            }\n            last_avail_out = strm.avail_out;\n            if (strm.next_out) {\n                if (strm.avail_out === 0 || status === Z_STREAM_END) {\n                    if (this.options.to === 'string') {\n                        let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n                        let tail = strm.next_out - next_out_utf8;\n                        let utf8str = strings.buf2string(strm.output, next_out_utf8);\n                        strm.next_out = tail;\n                        strm.avail_out = chunkSize - tail;\n                        if (tail)\n                            strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n                        this.onData(utf8str);\n                    } else {\n                        this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n                    }\n                }\n            }\n            if (status === Z_OK && last_avail_out === 0)\n                continue;\n            if (status === Z_STREAM_END) {\n                status = zlib_inflate.inflateEnd(this.strm);\n                this.onEnd(status);\n                this.ended = true;\n                return true;\n            }\n            if (strm.avail_in === 0)\n                break;\n        }\n        return true;\n    };\n    Inflate.prototype.onData = function (chunk) {\n        this.chunks.push(chunk);\n    };\n    Inflate.prototype.onEnd = function (status) {\n        if (status === Z_OK) {\n            if (this.options.to === 'string') {\n                this.result = this.chunks.join('');\n            } else {\n                this.result = utils.flattenChunks(this.chunks);\n            }\n        }\n        this.chunks = [];\n        this.err = status;\n        this.msg = this.strm.msg;\n    };\n    function inflate(input, options) {\n        const inflator = new Inflate(options);\n        inflator.push(input);\n        if (inflator.err)\n            throw inflator.msg || msg[inflator.err];\n        return inflator.result;\n    }\n    function inflateRaw(input, options) {\n        options = options || {};\n        options.raw = true;\n        return inflate(input, options);\n    }\n\n\n    return {\n        Inflate,\n        inflate,\n        inflateRaw,\n        ungzip : inflate,\n        constants\n    };\n  \n});\ndefine('skylark-pako/main',[\r\n    \"skylark-langx-ns\",\r\n    \"./deflates\",\r\n    \"./inflates\"\r\n], function(skylark, deflates,inflates) {\r\n\r\n\r\n    return skylark.attach(\"intg.pako\", {\r\n        deflates,\r\n        inflates\r\n    });\r\n\r\n});\ndefine('skylark-pako', ['skylark-pako/main'], function (main) { return main; });\n\n"]}
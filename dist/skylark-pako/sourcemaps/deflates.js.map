{"version":3,"sources":["deflates.js"],"names":["define","zlib_deflate","utils","strings","msg","ZStream","constants","toString","Object","prototype","Z_NO_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","Deflate","options","this","assign","level","method","chunkSize","windowBits","memLevel","strategy","opt","raw","gzip","err","ended","chunks","strm","avail_out","status","deflateInit2","Error","header","deflateSetHeader","dictionary","dict","string2buf","call","Uint8Array","deflateSetDictionary","_dict_set","deflate","input","deflator","push","result","data","flush_mode","_flush_mode","next_in","avail_in","length","output","next_out","onData","subarray","deflateEnd","onEnd","chunk","flattenChunks","deflateRaw"],"mappings":"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","file":"../deflates.js","sourcesContent":["define([\n    './zlib/deflate',\n    './utils/common',\n    './utils/strings',\n    './zlib/messages',\n    './zlib/zstream',\n    './zlib/constants'\n], function (zlib_deflate, utils, strings, msg, ZStream, constants) {\n    'use strict';\n\n    const toString = Object.prototype.toString;\n    const {Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_OK, Z_STREAM_END, Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY, Z_DEFLATED} = constants;\n\n    function Deflate(options) {\n        this.options = utils.assign({\n            level: Z_DEFAULT_COMPRESSION,\n            method: Z_DEFLATED,\n            chunkSize: 16384,\n            windowBits: 15,\n            memLevel: 8,\n            strategy: Z_DEFAULT_STRATEGY\n        }, options || {});\n        let opt = this.options;\n        if (opt.raw && opt.windowBits > 0) {\n            opt.windowBits = -opt.windowBits;\n        } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {\n            opt.windowBits += 16;\n        }\n        this.err = 0;\n        this.msg = '';\n        this.ended = false;\n        this.chunks = [];\n        this.strm = new ZStream();\n        this.strm.avail_out = 0;\n        let status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);\n        if (status !== Z_OK) {\n            throw new Error(msg[status]);\n        }\n        if (opt.header) {\n            zlib_deflate.deflateSetHeader(this.strm, opt.header);\n        }\n        if (opt.dictionary) {\n            let dict;\n            if (typeof opt.dictionary === 'string') {\n                dict = strings.string2buf(opt.dictionary);\n            } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n                dict = new Uint8Array(opt.dictionary);\n            } else {\n                dict = opt.dictionary;\n            }\n            status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n            if (status !== Z_OK) {\n                throw new Error(msg[status]);\n            }\n            this._dict_set = true;\n        }\n    }\n    Deflate.prototype.push = function (data, flush_mode) {\n        const strm = this.strm;\n        const chunkSize = this.options.chunkSize;\n        let status, _flush_mode;\n        if (this.ended) {\n            return false;\n        }\n        if (flush_mode === ~~flush_mode)\n            _flush_mode = flush_mode;\n        else\n            _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n        if (typeof data === 'string') {\n            strm.input = strings.string2buf(data);\n        } else if (toString.call(data) === '[object ArrayBuffer]') {\n            strm.input = new Uint8Array(data);\n        } else {\n            strm.input = data;\n        }\n        strm.next_in = 0;\n        strm.avail_in = strm.input.length;\n        for (;;) {\n            if (strm.avail_out === 0) {\n                strm.output = new Uint8Array(chunkSize);\n                strm.next_out = 0;\n                strm.avail_out = chunkSize;\n            }\n            if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n                this.onData(strm.output.subarray(0, strm.next_out));\n                strm.avail_out = 0;\n                continue;\n            }\n            status = zlib_deflate.deflate(strm, _flush_mode);\n            if (status === Z_STREAM_END) {\n                if (strm.next_out > 0) {\n                    this.onData(strm.output.subarray(0, strm.next_out));\n                }\n                status = zlib_deflate.deflateEnd(this.strm);\n                this.onEnd(status);\n                this.ended = true;\n                return status === Z_OK;\n            }\n            if (strm.avail_out === 0) {\n                this.onData(strm.output);\n                continue;\n            }\n            if (_flush_mode > 0 && strm.next_out > 0) {\n                this.onData(strm.output.subarray(0, strm.next_out));\n                strm.avail_out = 0;\n                continue;\n            }\n            if (strm.avail_in === 0)\n                break;\n        }\n        return true;\n    };\n    Deflate.prototype.onData = function (chunk) {\n        this.chunks.push(chunk);\n    };\n    Deflate.prototype.onEnd = function (status) {\n        if (status === Z_OK) {\n            this.result = utils.flattenChunks(this.chunks);\n        }\n        this.chunks = [];\n        this.err = status;\n        this.msg = this.strm.msg;\n    };\n    function deflate(input, options) {\n        const deflator = new Deflate(options);\n        deflator.push(input, true);\n        if (deflator.err) {\n            throw deflator.msg || msg[deflator.err];\n        }\n        return deflator.result;\n    }\n    function deflateRaw(input, options) {\n        options = options || {};\n        options.raw = true;\n        return deflate(input, options);\n    }\n    function gzip(input, options) {\n        options = options || {};\n        options.gzip = true;\n        return deflate(input, options);\n    }\n\n    return {\n        Deflate,\n        deflate,\n        deflateRaw,\n        gzip,\n        constants\n    };\n\n});"]}
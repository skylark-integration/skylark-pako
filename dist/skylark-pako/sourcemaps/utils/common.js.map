{"version":3,"sources":["utils/common.js"],"names":["define","_has","obj","key","Object","prototype","hasOwnProperty","call","assign","sources","Array","slice","arguments","length","source","shift","TypeError","p","flattenChunks","chunks","len","i","l","result","Uint8Array","pos","chunk","set"],"mappings":";;;;;;;AAAAA,UAAW,WAGP,MAAMC,EAAO,CAACC,EAAKC,IACRC,OAAOC,UAAUC,eAAeC,KAAKL,EAAKC,GAoCrD,OACEK,OAlCF,SAAgBN,GACZ,MAAMO,EAAUC,MAAML,UAAUM,MAAMJ,KAAKK,UAAW,GACtD,KAAOH,EAAQI,QAAQ,CACnB,MAAMC,EAASL,EAAQM,QACvB,GAAKD,EAAL,CAGA,GAAsB,iBAAXA,EACP,MAAM,IAAIE,UAAUF,EAAS,sBAEjC,IAAK,MAAMG,KAAKH,EACRb,EAAKa,EAAQG,KACbf,EAAIe,GAAKH,EAAOG,KAI5B,OAAOf,GAmBTgB,cAhBF,SAAuBC,GACnB,IAAIC,EAAM,EACV,IAAK,IAAIC,EAAI,EAAGC,EAAIH,EAAON,OAAQQ,EAAIC,EAAGD,IACtCD,GAAOD,EAAOE,GAAGR,OAErB,MAAMU,EAAS,IAAIC,WAAWJ,GAC9B,IAAK,IAAIC,EAAI,EAAGI,EAAM,EAAGH,EAAIH,EAAON,OAAQQ,EAAIC,EAAGD,IAAK,CACpD,IAAIK,EAAQP,EAAOE,GACnBE,EAAOI,IAAID,EAAOD,GAClBA,GAAOC,EAAMb,OAEjB,OAAOU","file":"../../utils/common.js","sourcesContent":["define([], function () {\n\n\n    const _has = (obj, key) => {\n        return Object.prototype.hasOwnProperty.call(obj, key);\n    };\n\n    function assign(obj) {\n        const sources = Array.prototype.slice.call(arguments, 1);\n        while (sources.length) {\n            const source = sources.shift();\n            if (!source) {\n                continue;\n            }\n            if (typeof source !== 'object') {\n                throw new TypeError(source + 'must be non-object');\n            }\n            for (const p in source) {\n                if (_has(source, p)) {\n                    obj[p] = source[p];\n                }\n            }\n        }\n        return obj;\n    }\n\n    function flattenChunks(chunks){\n        let len = 0;\n        for (let i = 0, l = chunks.length; i < l; i++) {\n            len += chunks[i].length;\n        }\n        const result = new Uint8Array(len);\n        for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n            let chunk = chunks[i];\n            result.set(chunk, pos);\n            pos += chunk.length;\n        }\n        return result;\n    };\n\n    return {\n      assign,\n      flattenChunks\n    };\n});"]}
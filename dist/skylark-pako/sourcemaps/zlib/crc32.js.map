{"version":3,"sources":["zlib/crc32.js"],"names":["define","crcTable","Uint32Array","c","table","n","k","makeTable","crc","buf","len","pos","t","end","i"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aAUA,MAaMC,EAAW,IAAIC,YAbH,MACd,IAAIC,EAAGC,KACP,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1BF,EAAIE,EACJ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACnBH,EAAQ,EAAJA,EAAQ,WAAaA,IAAM,EAAIA,IAAM,EAE7CC,EAAMC,GAAKF,EAEf,OAAOC,GAIsBG,IAajC,MAXc,CAACC,EAAKC,EAAKC,EAAKC,KAC1B,MAAMC,EAAIX,EACJY,EAAMF,EAAMD,EAClBF,IAAQ,EACR,IAAK,IAAIM,EAAIH,EAAKG,EAAID,EAAKC,IACvBN,EAAMA,IAAQ,EAAII,EAAmB,KAAhBJ,EAAMC,EAAIK,KAEnC,OAAc,EAAPN","file":"../../zlib/crc32.js","sourcesContent":["define([], function () {\n    'use strict';\n    // Original version : zlib 1.2.8\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n\n    // Note: we can't get significant speed boost here.\n    // So write code to minimize size - no pregenerated tables\n    // and array tools dependencies.\n    \n    // Use ordinary array, since untyped makes no boost here\n    const makeTable = () => {\n        let c, table = [];\n        for (var n = 0; n < 256; n++) {\n            c = n;\n            for (var k = 0; k < 8; k++) {\n                c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;\n            }\n            table[n] = c;\n        }\n        return table;\n    };\n    \n    // Create table on load. Just 255 signed longs. Not a problem.\n    const crcTable = new Uint32Array(makeTable());\n\n    const crc32 = (crc, buf, len, pos) => {\n        const t = crcTable;\n        const end = pos + len;\n        crc ^= -1;\n        for (let i = pos; i < end; i++) {\n            crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];\n        }\n        return crc ^ -1; // >>> 0;\n    };\n\n\n    return crc32;\n\n});"]}